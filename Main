// ==UserScript==
// @name         霸主辅助
// @match		*://*.9125flying.com/*
// @version      1.12.7.12.7
// @description  多功能辅助
// @author       Draco9
// ==/UserScript==
(function () {
    console.log("[霸主辅助]开始加载");

    CreateUI();

    var map_time = 0;
    var run_time = 0;
    var time_out = 0;

    var bag = false;
    var auto_change_map = false;
    var pvp_time = 0;
    var Initialized = false;
    var daily_job = false;
    var personal_boss = false;
    var dont_storage = false;
    var send_team_pass = 0;
    var bossType_list = [];
    var history_max = 0;
    var saopai = false;
    var mode_fanshang = false;
    var mode_paizi = false;
    var isShengYuBoss = false;
    // 仓库物品数量记录
    var storage_num = {};
    var zhenyan_timecount = 0;
    var xiezh_timecount = 0;
    /**
    * 0 = 元宝
    * 1 = 打玉
    * 2 = 大号
    */
    var auto_mode = 0;
    var boss_party = true;
    /**
    * 0 = 元宝
    * 1 = 打玉
    * 2 = 大号
    */
    function SetAutoMode(mode) {
        auto_mode = mode;
        switch (mode) {
            case 0:
                // 元宝
                document.getElementById("btn_change_map_mode").innerHTML = "元宝";
                map_time = 5;
                history_max = 6;
                bossType_list = [
                    601, // 「启蒙」沃玛教主
                    602, // 「双星」石墓尸王
                    603, // 「三魂」虹魔教主
                    604, // 「四玄」火龙教主
                    605, // 「五焰」绿魔蜘蛛
                    606, // 「六羽」玉面素狐王
                ];
                break;
            case 1:
                // 打玉
                document.getElementById("btn_change_map_mode").innerHTML = "打玉";
                map_time = 3 * 60;
                history_max = 6;
                bossType_list = [
                    // 7112, // 天神至尊★兽人巨怪★强散★反伤
                    // 7213, // 天神至尊★兽人巨怪★神器★反伤
                    // 7312, // 天神至尊★兽人巨怪★元婴★反伤
                    // 7411, // 天神至尊★兽人巨怪★封号★反伤
                    // 7111, // 混沌至尊★沙漠巨鲲★强散★反伤
                    // 7212, // 混沌至尊★沙漠巨鲲★神器★反伤
                    // 7311, // 混沌至尊★沙漠巨鲲★元婴★反伤
                    // 7410, // 混沌至尊★沙漠巨鲲★封号★反伤
                    // 7110, // 开天至尊★狼奇统领★强散★反伤
                    // 7211, // 开天至尊★狼奇统领★神器★反伤
                    // 7310, // 开天至尊★狼奇统领★元婴★反伤
                    // 7409, // 开天至尊★狼奇统领★封号★反伤
                    7109, // 创造至尊★炼狱天魔★强散
                    7210, // 创造至尊★炼狱天魔★神器
                    7309, // 创造至尊★炼狱天魔★元婴
                    7408, // 创造至尊★炼狱天魔★封号
                    7108, // 九黎至尊★绿影屠夫★强散
                    7209, // 九黎至尊★绿影屠夫★神器
                    7308, // 九黎至尊★绿影屠夫★元婴
                    7407, // 九黎至尊★绿影屠夫★封号
                    7107, // 八卦至尊★无极尊主★强散
                    7208, // 八卦至尊★无极尊主★神器
                    7307, // 八卦至尊★无极尊主★元婴
                    7406, // 八卦至尊★无极尊主★封号
                    7106, // 神农至尊★荒古蛮牛★强散
                    7207, // 神农至尊★荒古蛮牛★神器
                    7306, // 神农至尊★荒古蛮牛★元婴
                    7405, // 神农至尊★荒古蛮牛★封号
                    7105, // 轩辕至尊★碧玉金蝎★强散
                    7206, // 轩辕至尊★碧玉金蝎★神器
                    7305, // 轩辕至尊★碧玉金蝎★元婴
                    7404, // 轩辕至尊★碧玉金蝎★封号
                    7104, // 东皇至尊★赤影暗虎★强散
                    7205, // 东皇至尊★赤影暗虎★神器
                    7304, // 东皇至尊★赤影暗虎★元婴
                    7403, // 东皇至尊★赤影暗虎★封号
                    // 7103, // 风神至尊★魅影领主★强散
                    // 7204, // 风神至尊★魅影领主★神器
                    // 7303, // 风神至尊★魅影领主★元婴
                    // 7402, // 风神至尊★魅影领主★封号
                    // 7102, // 雷神至尊★雷霆之主★强散
                    // 7203, // 雷神至尊★雷霆之主★神器
                    // 7302, // 雷神至尊★雷霆之主★元婴
                    // 7401, // 雷神至尊★雷霆之主★封号
                    // 7201, // 水神至尊★天山冰主★神器
                    // 7202, // 火神至尊★熔岩巨人★神器
                    // 7301, // 火神至尊★熔岩巨人★元婴
                    // 7101, // 火神至尊★熔岩巨人★强散
                ];
                break;
            case 2:
                // 大号
                document.getElementById("btn_change_map_mode").innerHTML = "大号";
                map_time = 3 * 60;
                history_max = 6;
                bossType_list = [
                    7112, // 天神至尊★兽人巨怪★强散★反伤
                    7213, // 天神至尊★兽人巨怪★神器★反伤
                    7312, // 天神至尊★兽人巨怪★元婴★反伤
                    7411, // 天神至尊★兽人巨怪★封号★反伤
                    7111, // 混沌至尊★沙漠巨鲲★强散★反伤
                    7212, // 混沌至尊★沙漠巨鲲★神器★反伤
                    7311, // 混沌至尊★沙漠巨鲲★元婴★反伤
                    7410, // 混沌至尊★沙漠巨鲲★封号★反伤
                    7110, // 开天至尊★狼奇统领★强散★反伤
                    7211, // 开天至尊★狼奇统领★神器★反伤
                    7310, // 开天至尊★狼奇统领★元婴★反伤
                    7409, // 开天至尊★狼奇统领★封号★反伤
                    // 7109, // 创造至尊★炼狱天魔★强散
                    // 7210, // 创造至尊★炼狱天魔★神器
                    // 7309, // 创造至尊★炼狱天魔★元婴
                    // 7408, // 创造至尊★炼狱天魔★封号
                    // 7108, // 九黎至尊★绿影屠夫★强散
                    // 7209, // 九黎至尊★绿影屠夫★神器
                    // 7308, // 九黎至尊★绿影屠夫★元婴
                    // 7407, // 九黎至尊★绿影屠夫★封号
                ];
                break;
        }
        // var i = bossType_list.length;
        // while (i) {
        //     var j = Math.floor(Math.random() * i--);
        //     [bossType_list[j], bossType_list[i]] = [bossType_list[i], bossType_list[j]];
        // }
    }

    // 自动使用物品列表
    var auto_use_item_list = [
        214, // 货运金令（跨服）
        3000308, // 血魔结晶(小)
        3000309, // 血魔结晶(中)
        3000310, // 血魔结晶(大)
        3018154, // 血魔结晶(极)
        3018155, // 血魔结晶(超)
        3018156, // 血魔结晶(特)
        3000305, // 金刚符印(小)
        3000306, // 金刚符印(中)
        3000307, // 金刚符印(大)
        3018151, // 金刚符印(极)
        3018152, // 金刚符印(超)
        3018153, // 金刚符印(特)
        3000463, // 血脉精华(小)
        3000464, // 血脉精华(中)
        3000465, // 血脉精华(大)
        3022875, // 血脉精华(20个)
        3022876, // 血脉精华(50个)
        3022877, // 血脉精华(100个)
        3022878, // 血脉精华(500个)
        3023095, // 血脉精华(10000个)
        3001209, // 召唤符：小精灵（24小时）
        4617, // 首领卷轴
        4619, // 宝箱卷轴
        4730, // 声望
        8335, // 小飞鞋礼盒
        3000450, // 答题礼盒
        3110301, // 1剑灵碎片
        3110302, // 3剑灵碎片
        3110303, // 5剑灵碎片
        3110304, // 10剑灵碎片
        3110305, // 20剑灵碎片
        1819, // 更新福利
        3003101, // 魂之宝袋
        3003102, // 至强者宝袋
        8390, // 属性丹(无限制)
        3018521, // 玉佩礼盒(小)
        3018522, // 玉佩礼盒(中)
        3018522, // 玉佩礼盒(大)
        3018531, // 30生命之息
        3018532, // 60生命之息
        3018533, // 90生命之息
        3018161, // 5个血魔心脏
        3018162, // 10个血魔心脏
        3018171, // 5个魔血油
        3018172, // 10个魔血油
        4729, // 斗神宝箱
    ];

    // 自动存仓物品列表
    var storage_list = [
        68, // 淬炼石
        8347, // 蓝晶石
        3000928, // 5000万经验丹
        3000929, // 1亿经验丹
        11001, // 技能书页
        3001009, // 9转神水 可交易
        3001029, // 9转天木 可交易
        3001010, // 10转蟠桃 可交易
        3001030, // 10转玄风羽 可交易
        3001011, // 11转龙鳞 可交易
        3001031, // 11转造化丹 可交易
        3001012, // 12转天地葫藤 可交易
        3001032, // 12转天外灵矿 可交易
        3001013, // 13转七彩神草 可交易
        3001033, // 13转炫彩灵矿 可交易
        3001014, // 14转灭世天火 可交易
        3001034, // 14转乾坤玄令 可交易
        3001015, // 15转无字天书 可交易
        3001035, // 15转鸿蒙灵气 可交易
        3001461, // 青色灵羽
        3001463, // 金色灵羽
        3001465, // 蓝色灵羽
        3001542, // 红色灵羽
        3000850, // “万”
        3000851, // “字”
        3000852, // “决”
        3000853, // “引”
        3000298, // 荣誉之魂
        3000278, // 阵法之灵
        3000563, // 盾牌残片
        3000311, // 玉佩碎片
        3000422, // 斗笠碎片
        3000562, // 归元丹
        3000846, // 功勋令
        3000516, // 顿悟印记 可交易
        3000526, // 创造宝石 可交易
        3023005, // 功勋令
        3022218, // 血龙玉 可交易
        3022812, // 血龙玉
        3022249, // 圣龙之魂 可交易
        3023093, // 圣龙之魂
        3022801, // 紫陨灵矿
        3022761, // 紫陨灵矿 可交易
        3022765, // 天衍神石 可交易
        3022886, // 紫色晶核
        3022887, // 蓝色晶核
        3022888, // 绿色晶核
        3022889, // 红色晶核
        358, // 天地神石
        4716, //强散碎片
        4719, // 自然精魄
        4720, // 自然碎片
        4721, // 幽冥玄晶
        4722, // 幽冥玄晶 可交易
        4723, // 玄晶碎片 可交易
        4739, // 圣灵精魄
        4740, // 自然精华
        4741, // 星云尘埃
        4724, // 玄晶碎片
        4745, // 阵眼之魂
        8379, // 祝福洗练石
        8462, // 生命之息
        8615, // 圣魂源石
        8765, // 星辰碎片
        3022800, // 圣器图纸 可交易
        3025714, // 天工锥
        3000847, // 金刚石
        3000848, // 蚩尤之角
        3000549, // 觉醒之石
        3000739, // 至尊宝石
        3000845, // 天关灵符
        3000873, // 圣器灵石
        3022763, // 空泽灵珠 可交易
        3022001, // 天地宝箱
        3000842, // 5倍隐藏地图券 可交易
        3000843, // 10倍隐藏地图券 可交易
        3000374, // 20倍隐藏地图券 可交易
        3000844, // 30倍隐藏地图券 可交易
        3026737, // 天蚕棉纱
        31403001, // 面纱(1阶)
        31403002, // 面纱(2阶)
        31403003, // 面纱(3阶)
        31403004, // 面纱(4阶)
        31403005, // 面纱(5阶)
        31403006, // 面纱(6阶)
        31403007, // 面纱(7阶)
        31403008, // 面纱(8阶)
        31403009, // 面纱(9阶)
        31403010, // 面纱(10阶)
        31403011, // 面纱(11阶)
        31403012, // 面纱(12阶)
        31403013, // 面纱(13阶)
        31403014, // 面纱(14阶)
        31403015, // 面纱(15阶)
        31403016, // 面纱(16阶)
        31403017, // 面纱(17阶)
        31403018, // 面纱(18阶)
        31403019, // 面纱(19阶)
        31403020, // 面纱(20阶)
        3025798, // 攻击灵石(残)
        3025799, // 物防灵石(残)
        3025800, // 魔防灵石(残)
        3025801, // 暴伤灵石(残)
        3025833, // 混沌灵石(残)
        3000856, // 血魔心脏  可交易
        3000855, // 魔血油  可交易
        3023999, // 血魔心脏
        3023998, // 魔血油
        3000512, // 气之结晶
        49005, // 魂之精石
        49006, // 魂之神石
        49105, // 魂之精石
        49106, // 魂之神石
        3000849, // 狐月天珠
        49003, // 魂之神石碎片
        49103, // 魂之神石碎片
        49002, // 魂之精石碎片
        49102, // 魂之精石碎片
        3025655, // 国王密令·天
        3025656, // 国王密令·地
        3025657, // 国王密令·玄
        3025658, // 国王密令·黄
        3025659, // 国王密令·全爆
        4728, // 斗神碎片
        32001, // 黑暗骑士的翅角
        32002, // 炼狱天魔的饰品
        32003, // 兽人巨怪的残铁
        32004, // 无双剑神的血肉
        32005, // 赤金邪魔的金叶
        32006, // 嗜血狂魔的背棘
        32007, // 冰原兽王的手骨
        32008, // 狂刀战神的宝珠
        32009, // 四尾赤猿的残爪
        32010, // 异域冰兽的宝锤
        32011, // 异域冰主的手印
        32012, // 九尾妖狐的尾毛
        32013, // 异域霸王的尖牙
        32014, // 荒古蛮牛的信物
        32015, // 无相剑魔的剑息
        32016, // 蛛魔女王的织网
        32017, // 无极尊主的鳞甲
        32018, // 魅影领主的头骨
        32019, // 鬼面猿王的后尾
        32020, // 熔岩巨人的系带
        32021, // 半魔之主的短镰
        32022, // 碧玉金蝎的秘宝
        32023, // 三角异兽的蛋壳
        32024, // 狂刀勇士的绑腿
        32025, // 雷霆之主的结晶
        32026, // 狂沙巨鲲的宝物
        32027, // 巨斧狂魔的眼珠
        32028, // 炎鬃烈马的腿骨
        32029, // 赤金麒麟的鳞甲
        32030, // 虎爪君王的指甲
        32031, // 惨爪魔龙的卵
        32032, // 狼奇统领的眼球
        32033, // 半神之主的脊骨
        32034, // 火麟巨兽的头颅
        32035, // 鹿角异兽的尖角
        32036, // 福兽的法宝
        32037, // 战锤骨魔的玉佩
        32038, // 战狂的披风
        32039, // 双斧恶魔的钢刃
        32040, // 赤炎枭龙的胸甲
        32041, // 金丝魔王的戒指
        32042, // 天涯墨客的护腕
        32043, // 撼天的头盔
        32044, // 灭尽龙的战靴
        32045, // 堕落天神的腰带
        32046, // 金羽天尊的项链
        32760041, // [五鼎万钟]圣王独尊¤刀√
        32760042, // [五鼎万钟]圣王独尊¤弓√
        32760043, // [五鼎万钟]圣王独尊¤盔√
        32760046, // [五鼎万钟]圣王独尊¤靴√
        32760045, // [五鼎万钟]圣王独尊¤甲√
        32760044, // [五鼎万钟]圣王独尊¤链√
        31005810, // 焰·≮★十殿阎罗★≯·刃
        31010810, // 焰·≮★十殿阎罗★≯·甲(男)
        31011810, // 焰·≮★十殿阎罗★≯·甲(女)
    ];

    // 自动交易物品列表
    var auto_trade_item = [
        3000928, // 5000万经验丹
        3000929, // 1亿经验丹
        3001009, // 9转神水 可交易
        3001029, // 9转天木 可交易
        3001010, // 10转蟠桃 可交易
        3001030, // 10转玄风羽 可交易
        3001011, // 11转龙鳞 可交易
        3001031, // 11转造化丹 可交易
        3001012, // 12转天地葫藤 可交易
        3001032, // 12转天外灵矿 可交易
        3001013, // 13转七彩神草 可交易
        3001033, // 13转炫彩灵矿 可交易
        3001014, // 14转灭世天火 可交易
        3001034, // 14转乾坤玄令 可交易
        3001015, // 15转无字天书 可交易
        3001035, // 15转鸿蒙灵气 可交易
        3001461, // 青色灵羽
        3001463, // 金色灵羽
        3001465, // 蓝色灵羽
        3001542, // 红色灵羽
        3000850, // “万”
        3000851, // “字”
        3000852, // “决”
        3000853, // “引”
        3000854, // 万字诀引
        3000873, // 圣器灵石
        3022800, // 圣器图纸 可交易
        3000847, // 金刚石 可交易
        3000848, // 蚩尤之角 可交易
        3000516, // 顿悟印记 可交易
        3000526, // 创造宝石 可交易
        3022761, // 紫陨灵矿 可交易
        3022765, // 天衍神石 可交易
        3022218, // 血龙玉
        3000512, // 气之结晶
        49005, // 魂之精石
        49006, // 魂之神石
        3000849, // 狐月天珠
        49003, // 魂之神石碎片
        49002, // 魂之精石碎片
        3000856, // 血魔心脏
        3000855, // 魔血油
        3022249, // 圣龙之魂
        3000877, // 圣器宝匣
        3000849, // 狐月天珠 可交易
        3000846, // 功勋令 可交易
        4723, // 玄晶碎片 可交易
        4722, // 幽冥玄晶 可交易
        3022763, // 空泽灵珠 可交易
        3000842, // 5倍隐藏地图券 可交易
        3000843, // 10倍隐藏地图券 可交易
        3000374, // 20倍隐藏地图券 可交易
        3000844, // 30倍隐藏地图券 可交易
        3025655, // 国王密令·天
        3025656, // 国王密令·地
        3025657, // 国王密令·玄
        3025658, // 国王密令·黄
        3025659, // 国王密令·全爆
        32001, // 黑暗骑士的翅角
        32002, // 炼狱天魔的饰品
        32003, // 兽人巨怪的残铁
        32004, // 无双剑神的血肉
        32005, // 赤金邪魔的金叶
        32006, // 嗜血狂魔的背棘
        32007, // 冰原兽王的手骨
        32008, // 狂刀战神的宝珠
        32009, // 四尾赤猿的残爪
        32010, // 异域冰兽的宝锤
        32011, // 异域冰主的手印
        32012, // 九尾妖狐的尾毛
        32013, // 异域霸王的尖牙
        32014, // 荒古蛮牛的信物
        32015, // 无相剑魔的剑息
        32016, // 蛛魔女王的织网
        32017, // 无极尊主的鳞甲
        32018, // 魅影领主的头骨
        32019, // 鬼面猿王的后尾
        32020, // 熔岩巨人的系带
        32021, // 半魔之主的短镰
        32022, // 碧玉金蝎的秘宝
        32023, // 三角异兽的蛋壳
        32024, // 狂刀勇士的绑腿
        32025, // 雷霆之主的结晶
        32026, // 狂沙巨鲲的宝物
        32027, // 巨斧狂魔的眼珠
        32028, // 炎鬃烈马的腿骨
        32029, // 赤金麒麟的鳞甲
        32030, // 虎爪君王的指甲
        32031, // 惨爪魔龙的卵
        32032, // 狼奇统领的眼球
        32033, // 半神之主的脊骨
        32034, // 火麟巨兽的头颅
        32035, // 鹿角异兽的尖角
        32036, // 福兽的法宝
        32037, // 战锤骨魔的玉佩
        32038, // 战狂的披风
        32039, // 双斧恶魔的钢刃
        32040, // 赤炎枭龙的胸甲
        32041, // 金丝魔王的戒指
        32042, // 天涯墨客的护腕
        32043, // 撼天的头盔
        32044, // 灭尽龙的战靴
        32045, // 堕落天神的腰带
        32046, // 金羽天尊的项链
    ];

    // 熔炼物品列表
    var bourse_list = [
        // 32761022, // [三寸人间]焚天鎏金¤弓√ 可交易
        // 32761023, // [三寸人间]焚天鎏金¤盔√ 可交易
    ];

    // 仓库空间不足时才熔炼的物品列表
    var bourse_add_list = [
    ];

    var garbage_list = [
        3000925, // 500万经验丹
        3000926, // 1000万经验丹
        3000927, // 2500万经验丹
        3000858, // 橡树果
        3000859, // 血炼丹
        3000860, // 百年灵芝
        132001, // 黑暗骑士的翅角(碎片)
        132002, // 炼狱天魔的饰品(碎片)
        132003, // 兽人巨怪的残铁(碎片)
        132004, // 无双剑神的血肉(碎片)
        132005, // 赤金邪魔的金叶(碎片)
        132006, // 嗜血狂魔的背棘(碎片)
        132007, // 冰原兽王的手骨(碎片)
        132008, // 狂刀战神的宝珠(碎片)
        132009, // 四尾赤猿的残爪(碎片)
        132010, // 异域冰兽的宝锤(碎片)
        132011, // 异域冰主的手印(碎片)
        132012, // 九尾妖狐的尾毛(碎片)
        132013, // 异域霸王的尖牙(碎片)
        132014, // 荒古蛮牛的信物(碎片)
        132015, // 无相剑魔的剑息(碎片)
        132016, // 蛛魔女王的织网(碎片)
        132017, // 无极尊主的鳞甲(碎片)
        132018, // 魅影领主的头骨(碎片)
        132019, // 鬼面猿王的后尾(碎片)
        132020, // 熔岩巨人的系带(碎片)
        132021, // 半魔之主的短镰(碎片)
        132022, // 碧玉金蝎的秘宝(碎片)
        132023, // 三角异兽的蛋壳(碎片)
        132024, // 狂刀勇士的绑腿(碎片)
        132025, // 雷霆之主的结晶(碎片)
        132026, // 狂沙巨鲲的宝物(碎片)
        132027, // 巨斧狂魔的眼珠(碎片)
        132028, // 炎鬃烈马的腿骨(碎片)
        132029, // 赤金麒麟的鳞甲(碎片)
        132030, // 虎爪君王的指甲(碎片)
        132031, // 惨爪魔龙的卵(碎片)
        132032, // 狼奇统领的眼球(碎片)
        132033, // 半神之主的脊骨(碎片)
        132034, // 火麟巨兽的头颅(碎片)
        132035, // 鹿角异兽的尖角(碎片)
        132036, // 福兽的法宝(碎片)
        132037, // 战锤骨魔的玉佩(碎片)
        132038, // 战狂的披风(碎片)
        132039, // 双斧恶魔的钢刃(碎片)
        132040, // 赤炎枭龙的胸甲(碎片)
        132041, // 金丝魔王的戒指(碎片)
        132042, // 天涯墨客的护腕(碎片)
        132043, // 撼天的头盔(碎片)
        132044, // 灭尽龙的战靴(碎片)
        132045, // 堕落天神的腰带(碎片)
        132046, // 金羽天尊的项链(碎片)
    ];

    // 升级用物品
    var upgrand_list = [
        68, // 淬炼石
        4739, // 圣灵精魄
        4741, // 星云尘埃
        8462, // 生命之息
        8615, // 圣魂源石
        8765, // 星辰碎片
        3000278, // 阵法之灵
        3000298, // 荣誉之魂
        3000311, // 玉佩碎片
        3000422, // 斗笠碎片
        3000549, // 觉醒之石
        3000562, // 归元丹
        3000563, // 盾牌残片
        3022001, // 天地宝箱
        3023005, // 功勋令
        3023093, // 圣龙之魂
        3023999, // 血魔心脏
        3023998, // 魔血油
        3025714, // 天工锥
        3025798, // 攻击灵石(残)
        3025801, // 暴伤灵石(残)
        3025833, // 混沌灵石(残)
        3026737, // 天蚕棉纱
        49103, // 魂之神石碎片
        49102, // 魂之精石碎片
        31403001, // 面纱(1阶)
        31403002, // 面纱(2阶)
        31403003, // 面纱(3阶)
        31403004, // 面纱(4阶)
        31403005, // 面纱(5阶)
        31403006, // 面纱(6阶)
        31403007, // 面纱(7阶)
        31403008, // 面纱(8阶)
        31403009, // 面纱(9阶)
        31403010, // 面纱(10阶)
        31403011, // 面纱(11阶)
        31403012, // 面纱(12阶)
        31403013, // 面纱(13阶)
        31403014, // 面纱(14阶)
        31403015, // 面纱(15阶)
        31403016, // 面纱(16阶)
        31403017, // 面纱(17阶)
        31403018, // 面纱(18阶)
        31403019, // 面纱(19阶)
        31403020, // 面纱(20阶)
    ];

    var paimai_list = [
        // 31391011, // 碧波§琉璃瓶★
        // 31391021, // 辟地§混沌印★
        // 31391031, // 开天§女娲石★
        // 31391041, // 赤焰§盘古幡★
        // 31391051, // 沧海§人皇钟★
        // 31391061, // 紫金§炼妖葫★
        // 31391071, // 昆仑§太极图★
        // 31391081, // 龙门§乾坤伞★
        // 31391091, // 玄妙§玲珑塔★
        // 31391101, // 流涛§定海珠★
        // 31391111, // 铁马§神农鼎★
        // 31391121, // 金戈§诛仙剑★
        // 31391012, // 碧波§琉璃瓶★★
        // 31391022, // 辟地§混沌印★★
        // 31391032, // 开天§女娲石★★
        // 31391042, // 赤焰§盘古幡★★
        // 31391052, // 沧海§人皇钟★★
        // 31391062, // 紫金§炼妖葫★★
        // 31391072, // 昆仑§太极图★★
        // 31391082, // 龙门§乾坤伞★★
        // 31391092, // 玄妙§玲珑塔★★
        // 31391102, // 流涛§定海珠★★
        // 31391112, // 铁马§神农鼎★★
        // 31391122, // 金戈§诛仙剑★★
        // 31330001, // 一品神华元婴
        // 31330002, // 二品神华元婴
        // 31330003, // 三品神华元婴
        // 31012001, // 盾牌
        // 31012002, // 王者盾牌
        // 31012003, // 金牛盾牌
        // 31005730, // GM≮★仁义之心★≯刃
        // 31010730, // GM≮★仁义之心★≯甲(男)
        // 31011730, // GM≮★仁义之心★≯甲(女)
        // 31015730, // GM≮★仁义之心★≯盔
        // 31019730, // GM≮★仁义之心★≯链
        // 31022730, // GM≮★仁义之心★≯戒
        // 31026730, // GM≮★仁义之心★≯镯
        // 31062730, // GM≮★仁义之心★≯靴
        // 31064730, // GM≮★仁义之心★≯带

        // 32761021, // [三寸人间]焚天鎏金¤刀√ 可交易
        // 32761022, // [三寸人间]焚天鎏金¤弓√ 可交易
        // 32761023, // [三寸人间]焚天鎏金¤盔√ 可交易
        // 32761024, // [三寸人间]焚天鎏金¤链√ 可交易
        // 32761025, // [三寸人间]焚天鎏金¤甲√ 可交易
        // 32761026, // [三寸人间]焚天鎏金¤靴√ 可交易

        // 31015810, // 焰·≮★十殿阎罗★≯·盔
        // 31019810, // 焰·≮★十殿阎罗★≯·链
        // 31022810, // 焰·≮★十殿阎罗★≯·戒
        // 31026810, // 焰·≮★十殿阎罗★≯·镯
        // 31062810, // 焰·≮★十殿阎罗★≯·靴
        // 31064810, // 焰·≮★十殿阎罗★≯·带
    ];

    var paimai_add_list = [
        // 31005450, // 怒斩
        // 31005500, // 开天
        // 31005550, // 火龙之剑
        // 31005610, // 山河◇霸业纵横刃
        // 31005620, // 逍遥の贪狼七杀斧
        // 31005630, // 劫灭々百战陷阵剑
        // 31005650, // 凌霄づ怒海狂涛刃
        // 31005670, // 戮仙≯神武镇魔剑
        // 31010450, // 雷霆战甲(男)
        // 31010500, // 凤天魔甲
        // 31010550, // 火龙战甲(男)
        // 31010610, // 山河◇霸业纵横甲(男)
        // 31010620, // 逍遥の贪狼七杀甲(男)
        // 31010630, // 劫灭々百战陷阵甲(男)
        // 31010650, // 凌霄づ怒海狂涛甲(男)
        // 31010670, // 戮仙≯神武镇魔甲(男)
        // 31011450, // 雷霆战甲(女)
        // 31011500, // 凰天魔衣
        // 31011550, // 火龙战甲(女)
        // 31011610, // 山河◇霸业纵横甲(女)
        // 31011620, // 逍遥の贪狼七杀甲(女)
        // 31011630, // 劫灭々百战陷阵甲(女)
        // 31011650, // 凌霄づ怒海狂涛甲(女)
        // 31011670, // 戮仙≯神武镇魔甲(女)
        // 31015450, // 圣龙盔
        // 31015500, // 战神头盔
        // 31015541, // 擎天战盔
        // 31015550, // 火龙战盔
        // 31015610, // 山河◇霸业纵横盔
        // 31015620, // 逍遥の贪狼七杀盔
        // 31015630, // 劫灭々百战陷阵盔
        // 31015650, // 凌霄づ怒海狂涛盔
        // 31015670, // 戮仙≯神武镇魔盔
        // 31019500, // 战神项链
        // 31019510, // 梦幻の链
        // 31019520, // 神域项链
        // 31019530, // 战狂项链
        // 31019541, // 擎天项链
        // 31019550, // 火龙战链
        // 31019610, // 山河◇霸业纵横链
        // 31019620, // 逍遥の贪狼七杀链
        // 31019630, // 劫灭々百战陷阵链
        // 31019650, // 凌霄づ怒海狂涛链
        // 31019670, // 戮仙≯神武镇魔链
        // 31020450, // 雷霆项链
        // 31022450, // 雷霆战戒
        // 31022500, // 战神戒指
        // 31022510, // 战神の帝
        // 31022520, // 神域戒指
        // 31022530, // 战狂戒指
        // 31022541, // 擎天战戒
        // 31022550, // 火龙战戒
        // 31022610, // 山河◇霸业纵横戒
        // 31022620, // 逍遥の贪狼七杀戒
        // 31022630, // 劫灭々百战陷阵戒
        // 31022650, // 凌霄づ怒海狂涛戒
        // 31022670, // 戮仙≯神武镇魔戒
        // 31026450, // 雷霆护腕
        // 31026500, // 战神手镯
        // 31026510, // 守护の神
        // 31026520, // 神域手镯
        // 31026530, // 战狂手镯
        // 31026541, // 擎天护腕
        // 31026550, // 火龙战腕
        // 31026610, // 山河◇霸业纵横腕
        // 31026620, // 逍遥の贪狼七杀镯
        // 31026630, // 劫灭々百战陷阵镯
        // 31026650, // 凌霄づ怒海狂涛镯
        // 31026670, // 戮仙≯神武镇魔镯
        // 31028450, // 雷霆战靴
        // 31028500, // 战神鞋子
        // 31028620, // 逍遥の贪狼七杀靴
        // 31062541, // 擎天战靴
        // 31062550, // 火龙战靴
        // 31062610, // 山河◇霸业纵横靴
        // 31062630, // 劫灭々百战陷阵靴
        // 31062650, // 凌霄づ怒海狂涛靴
        // 31062670, // 戮仙≯神武镇魔靴
        // 31064450, // 雷霆腰带
        // 31064500, // 战神腰带
        // 31064541, // 擎天腰带
        // 31064550, // 火龙战带
        // 31064610, // 山河◇霸业纵横带
        // 31064620, // 逍遥の贪狼七杀带
        // 31064630, // 劫灭々百战陷阵带
        // 31064650, // 凌霄づ怒海狂涛带
        // 31064670, // 戮仙≯神武镇魔带
        // 31105500, // 镇天
        // 31105630, // 劫灭々琅琊月华剑
        // 31105650, // 凌霄づ耀阳开天杖
        // 31105670, // 戮仙≯炼狱斩魔杖
        // 31106450, // 龙牙
        // 31106550, // 火龙魔剑
        // 31106610, // 山河◇忘川云涛杖
        // 31106620, // 逍遥の法相天地杖
        // 31110450, // 烈焰魔衣(男)
        // 31110550, // 火龙魔衣(男)
        // 31110610, // 山河◇忘川云涛衣(男)
        // 31110620, // 逍遥の法相天地衣(男)
        // 31110630, // 劫灭々琅琊月华甲(男)
        // 31110650, // 凌霄づ耀阳开天甲(男)
        // 31110670, // 戮仙≯炼狱斩魔衣(男)
        // 31111450, // 烈焰魔衣(女)
        // 31111550, // 火龙魔衣(女)
        // 31111610, // 山河◇忘川云涛衣(女)
        // 31111620, // 逍遥の法相天地衣(女)
        // 31111630, // 劫灭々琅琊月华甲(女)
        // 31111650, // 凌霄づ耀阳开天甲(女)
        // 31111670, // 戮仙≯炼狱斩魔衣(女)
        // 31115450, // 魔龙盔
        // 31115500, // 圣魔头盔
        // 31115541, // 赤炎魔盔
        // 31115550, // 火龙魔盔
        // 31115610, // 山河◇忘川云涛盔
        // 31115620, // 逍遥の法相天地盔
        // 31115630, // 劫灭々琅琊月华盔
        // 31115650, // 凌霄づ耀阳开天盔
        // 31115670, // 戮仙≯炼狱斩魔盔
        // 31119550, // 火龙魔链
        // 31119620, // 逍遥の法相天地链
        // 31119630, // 劫灭々琅琊月华链
        // 31119650, // 凌霄づ耀阳开天链
        // 31119670, // 戮仙≯炼狱斩魔链
        // 31120450, // 烈焰项链
        // 31120500, // 圣魔项链
        // 31120510, // 蓝灵の链
        // 31120520, // 藤域项链
        // 31120530, // 法痴项链
        // 31120541, // 赤炎项链
        // 31120610, // 山河◇忘川云涛链
        // 31122450, // 烈焰魔戒
        // 31122500, // 圣魔戒指
        // 31122510, // 诅咒の亡
        // 31122520, // 藤域戒指
        // 31122530, // 法痴戒指
        // 31122541, // 赤炎魔戒
        // 31122550, // 火龙魔戒
        // 31122610, // 山河◇忘川云涛戒
        // 31122620, // 逍遥の法相天地戒
        // 31122630, // 劫灭々琅琊月华戒
        // 31122650, // 凌霄づ耀阳开天戒
        // 31122670, // 戮仙≯炼狱斩魔戒
        // 31126450, // 烈焰护腕
        // 31126500, // 圣魔手镯
        // 31126510, // 幽灵の魔
        // 31126520, // 藤域手镯
        // 31126530, // 法痴手镯
        // 31126541, // 赤炎护腕
        // 31126550, // 火龙魔腕
        // 31126610, // 山河◇忘川云涛腕
        // 31126620, // 逍遥の法相天地镯
        // 31126630, // 劫灭々琅琊月华镯
        // 31126650, // 凌霄づ耀阳开天镯
        // 31126670, // 戮仙≯炼狱斩魔镯
        // 31162450, // 烈焰魔靴
        // 31162500, // 圣魔鞋子
        // 31162541, // 赤炎魔靴
        // 31162550, // 火龙魔靴
        // 31162610, // 山河◇忘川云涛靴
        // 31162620, // 逍遥の法相天地靴
        // 31162630, // 劫灭々琅琊月华靴
        // 31162650, // 凌霄づ耀阳开天靴
        // 31162670, // 戮仙≯炼狱斩魔靴
        // 31164450, // 烈焰腰带
        // 31164500, // 圣魔腰带
        // 31164541, // 赤炎腰带
        // 31164550, // 火龙魔带
        // 31164610, // 山河◇忘川云涛带
        // 31164620, // 逍遥の法相天地带
        // 31164630, // 劫灭々琅琊月华带
        // 31164650, // 凌霄づ耀阳开天带
        // 31164670, // 戮仙≯炼狱斩魔带
        // 31205450, // 逍遥扇
        // 31205500, // 玄天
        // 31205550, // 火龙道剑
        // 31205610, // 山河◇无量元圣剑
        // 31205620, // 逍遥の飞羽游天剑
        // 31205630, // 劫灭々净世清虚剑
        // 31205650, // 凌霄づ浩然天地扇
        // 31205670, // 戮仙≯太乙伏魔扇
        // 31210450, // 光芒道袍(男)
        // 31210550, // 火龙道袍(男)
        // 31210610, // 山河◇无量元圣袍(男)
        // 31210620, // 逍遥の飞羽游天袍(男)
        // 31210630, // 劫灭々净世清虚甲(男)
        // 31210650, // 凌霄づ浩然天地甲(男)
        // 31210670, // 戮仙≯太乙伏魔袍(男)
        // 31211450, // 光芒道袍(女)
        // 31211550, // 火龙道袍(女)
        // 31211610, // 山河◇无量元圣袍(女)
        // 31211620, // 逍遥の飞羽游天袍(女)
        // 31211630, // 劫灭々净世清虚甲(女)
        // 31211650, // 凌霄づ浩然天地甲(女)
        // 31211670, // 戮仙≯太乙伏魔袍(女)
        // 31215450, // 天龙盔
        // 31215500, // 真魂头盔
        // 31215550, // 火龙道盔
        // 31215610, // 山河◇无量元圣盔
        // 31215620, // 逍遥の飞羽游天盔
        // 31215630, // 劫灭々净世清虚盔
        // 31215650, // 凌霄づ浩然天地盔
        // 31215670, // 戮仙≯太乙伏魔盔
        // 31219500, // 真魂项链
        // 31219510, // 龙骨の链
        // 31219520, // 木域项链
        // 31219530, // 道仙项链
        // 31219550, // 火龙道链
        // 31219610, // 山河◇无量元圣链
        // 31219620, // 逍遥の飞羽游天链
        // 31219630, // 劫灭々净世清虚链
        // 31219650, // 凌霄づ浩然天地链
        // 31219670, // 戮仙≯太乙伏魔链
        // 31220450, // 光芒项链
        // 31222450, // 光芒道戒
        // 31222500, // 真魂戒指
        // 31222510, // 邪恶の戒
        // 31222520, // 木域戒指
        // 31222530, // 道仙戒指
        // 31222550, // 火龙道戒
        // 31222610, // 山河◇无量元圣戒
        // 31222620, // 逍遥の飞羽游天戒
        // 31222630, // 劫灭々净世清虚戒
        // 31222650, // 凌霄づ浩然天地戒
        // 31222670, // 戮仙≯太乙伏魔戒
        // 31224500, // 真魂手镯
        // 31224510, // 宙斯の镯
        // 31224520, // 木域手镯
        // 31224530, // 道仙手镯
        // 31224550, // 火龙道腕
        // 31224610, // 山河◇无量元圣腕
        // 31224620, // 逍遥の飞羽游天镯
        // 31226450, // 光芒护腕
        // 31226630, // 劫灭々净世清虚镯
        // 31226650, // 凌霄づ浩然天地镯
        // 31226670, // 戮仙≯太乙伏魔镯
        // 31262450, // 光芒道靴
        // 31262500, // 真魂鞋子
        // 31262550, // 火龙道靴
        // 31262610, // 山河◇无量元圣靴
        // 31262620, // 逍遥の飞羽游天靴
        // 31262630, // 劫灭々净世清虚靴
        // 31262650, // 凌霄づ浩然天地靴
        // 31262670, // 戮仙≯太乙伏魔靴
        // 31264450, // 光芒腰带
        // 31264500, // 真魂腰带
        // 31264550, // 火龙道带
        // 31264610, // 山河◇无量元圣带
        // 31264620, // 逍遥の飞羽游天带
        // 31264630, // 劫灭々净世清虚带
        // 31264650, // 凌霄づ浩然天地带
        // 31264670, // 戮仙≯太乙伏魔带
        // 31005690, // 诛魔ぃ霸破千军刃
        // 31005710, // 天问☆乱世君临刃
        // 31010690, // 诛魔ぃ霸破千军甲(男)
        // 31010710, // 天问☆乱世君临甲(男)
        // 31011690, // 诛魔ぃ霸破千军甲(女)
        // 31011710, // 天问☆乱世君临甲(女)
        // 31015690, // 诛魔ぃ霸破千军盔
        // 31015710, // 天问☆乱世君临盔
        // 31019690, // 诛魔ぃ霸破千军链
        // 31019710, // 天问☆乱世君临链
        // 31022690, // 诛魔ぃ霸破千军戒
        // 31022710, // 天问☆乱世君临戒
        // 31026690, // 诛魔ぃ霸破千军镯
        // 31026710, // 天问☆乱世君临镯
        // 31062690, // 诛魔ぃ霸破千军靴
        // 31062710, // 天问☆乱世君临靴
        // 31064690, // 诛魔ぃ霸破千军带
        // 31064710, // 天问☆乱世君临带
        // 31106690, // 诛魔ぃ星落摇光杖
        // 31106710, // 天问☆炎龙乱舞杖
        // 31110690, // 诛魔ぃ星落摇光甲(男)
        // 31110710, // 天问☆炎龙乱舞甲(男)
        // 31111690, // 诛魔ぃ星落摇光甲(女)
        // 31111710, // 天问☆炎龙乱舞甲(女)
        // 31115690, // 诛魔ぃ星落摇光盔
        // 31115710, // 天问☆炎龙乱舞盔
        // 31119690, // 诛魔ぃ星落摇光链
        // 31119710, // 天问☆炎龙乱舞链
        // 31122690, // 诛魔ぃ星落摇光戒
        // 31122710, // 天问☆炎龙乱舞戒
        // 31126690, // 诛魔ぃ星落摇光镯
        // 31126710, // 天问☆炎龙乱舞镯
        // 31162690, // 诛魔ぃ星落摇光靴
        // 31162710, // 天问☆炎龙乱舞靴
        // 31164690, // 诛魔ぃ星落摇光带
        // 31164710, // 天问☆炎龙乱舞带
        // 31205690, // 诛魔ぃ混元太虚扇
        // 31205710, // 天问☆道法自然扇
        // 31210690, // 诛魔ぃ混元太虚甲(男)
        // 31210710, // 天问☆道法自然甲(男)
        // 31211690, // 诛魔ぃ混元太虚甲(女)
        // 31211710, // 天问☆道法自然甲(女)
        // 31215690, // 诛魔ぃ混元太虚盔
        // 31215710, // 天问☆道法自然盔
        // 31219690, // 诛魔ぃ混元太虚链
        // 31219710, // 天问☆道法自然链
        // 31222690, // 诛魔ぃ混元太虚戒
        // 31222710, // 天问☆道法自然戒
        // 31226690, // 诛魔ぃ混元太虚镯
        // 31226710, // 天问☆道法自然镯
        // 31262690, // 诛魔ぃ混元太虚靴
        // 31262710, // 天问☆道法自然靴
        // 31264690, // 诛魔ぃ混元太虚带
        // 31264710, // 天问☆道法自然带
    ];

    var Illustration_list = {
        32001: 1,
        32002: 2,
        32003: 3,
        32004: 4,
        32005: 5,
        32006: 6,
        32007: 7,
        32008: 8,
        32009: 9,
        32010: 10,
        32011: 11,
        32012: 12,
        32013: 13,
        32014: 14,
        32015: 15,
        32016: 16,
        32017: 17,
        32018: 18,
        32019: 19,
        32020: 20,
        32021: 21,
        32022: 22,
        32023: 23,
        32024: 24,
        32025: 25,
        32026: 26,
        32027: 27,
        32028: 28,
        32029: 29,
        32030: 30,
        32031: 31,
        32032: 32,
        32033: 33,
        32034: 34,
        32035: 35,
        32036: 36,
        32039: 37,
        32044: 38,
        32037: 39,
        32040: 40,
        32043: 41,
        32042: 42,
        32045: 43,
        32041: 44,
        32046: 45,
        32038: 46,
    };

    // 自动PVP列表 影响技能距离和自动逻辑
    var AutoFight_list = [
        3601, // 王者争霸
        420, // 热血乱斗场
        4701, // 荣耀竞技
        1026, // 本服沙巴克
        53001, // 勇者峡谷
        430, // 桃源秘宝
        201, // 无间炼狱
        4001, // 群雄逐鹿皇宫
        4002, // 群雄逐鹿外城
    ];

    // 无间BOSS配置
    // cm.global[26003].value.split("#") // BOSS ID 来源
    var wujian_check_list = {
        390001: { x: 18, y: 17 },
        390002: { x: 20, y: 82 },
        390003: { x: 86, y: 82 },
        390004: { x: 85, y: 20 },
    };

    // 排除神之领域 和 会影响战斗的地图
    var black_map = [
        5210, // 神之领域一层
        5211, // 神之领域二层
        5212, // 神之领域三层
        5213, // 神之领域四层
        5214, // 神之领域五层
        5215, // 神之领域六层
        5216, // 神之领域七层
        5224, // 神之领域八层
        5225, // 神之领域九层
        5226, // 神之领域十层
    ];

    // 协助/神铸/混世魔王 触发行为 在指定地图时需要跳过 避免干扰正在参加的活动
    var trigger_pass_map = [116, 6077, 4701, 53001, 1026, 4001, 4002, 201, 5300, 5120, 3601];

    // 令牌地图 打的时候就不去神铸地图了
    var lingpai_map_list = [6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105];

    var bossType = 0;
    var deliverHistory = [];

    var white_list = ["大号", "小号", "小号", "小号", "小号", "小号", "小号", "小号", "小号", "小号"];
    var team1 = ["大号", "小号", "小号", "小号", "小号"];
    var team2 = ["小号", "小号", "小号", "小号", "小号"];
    var hongbao_list = ["大号", "小号", "小号", "小号"];
    var black_list = [];

    function AddDeliverHistory(id) {
        if (deliverHistory.length > history_max) {
            deliverHistory.shift();
        }
        deliverHistory.push(id);
        // console.log(deliverHistory);
    }


    // 切换地图
    function ChangeMap() {
        if (mode_fanshang) { // 蛮荒秘境打反伤装
            var date = new Date();
            if (date.getHours() >= 11) {
                net.CrossModel.ins().send4(); // 检查跨服是否开放
                if (gd.kuafu.iskuafu) {
                    if (["大号", "小号", "小号", "小号", "小号"].includes(emIns.firstPlayer.playerObject.name)) {
                        if (gd.map.curMapId != 6073) {
                            DeliverTo(400060);
                            return;
                        }
                    } else {
                        if (gd.map.curMapId != 5290) {
                            DeliverTo(400044);
                            return;
                        }
                    }
                }
            }
        } else if (mode_paizi) {
            var date = new Date();
            if (date.getHours() >= 11) {
                net.CrossModel.ins().send4(); // 检查跨服是否开放
                if (gd.kuafu.iskuafu) {
                    if (emIns.firstPlayer.playerObject.name == "大号") {
                        // DeliverTo(400069); // 隐龙山谷三层
                        // DeliverTo(400085); // 火龙圣殿二层

                        // DeliverTo(400075); // 星空幻境二层
                        DeliverTo(400080); // 深渊禁地二层
                        // DeliverTo(400081); // 域外仙岛
                        // DeliverTo(400082); // 九霄战场
                        return;
                    } else {
                        // DeliverTo(400068); // 隐龙山谷二层
                        // DeliverTo(400084); // 火龙圣殿一层

                        // DeliverTo(400073); // 星空幻境一层
                        DeliverTo(400079); // 深渊禁地一层
                        // DeliverTo(400081); // 域外仙岛
                        // DeliverTo(400082); // 九霄战场
                        return;
                    }
                }
            }
        }

        bossType++;
        if (bossType == bossType_list.length - 1) {
            bossType = 0;
            // // 每个循环打一次神铸
            if (emIns.firstPlayer.playerObject.name == "大号") {
                // DeliverTo(400038);
                // return;
            } else {
                // DeliverTo(400037);
                // return;
            }
        }
        GetMapByBossNumber(bossType);
    }

    // 自动开启脚本
    function AutoStartUp() {
        if (Initialized == false) {
            if (emIns.firstPlayer.playerObject.name == "大号") {
                // SetSaoPai(true);
            }
            SetBossParty(false);
            SetBagClean(true);

            if (emIns.firstPlayer.playerObject.name == "大号") {
                if (auto_change_map && bag && saopai) {
                    Initialized = true;
                }
            } else {
                if (auto_change_map && bag) {
                    Initialized = true;
                }
            }
        }
    }

    /**
    * 根据BOSS狂欢配置角色任务
    **/
    function SetBossParty(bool) {
        if (boss_party != bool) {
            boss_party = bool;
            net.DeliverModel.ins().send1(12002); // 回城
            if (boss_party) {
                if (emIns.firstPlayer.playerObject.name == "大号") {
                    // BOSS狂欢 大号
                    SetAutoMode(2);
                    SetFanshang(false);
                    SetPaizi(false);
                } else {
                    // BOSS狂欢 小号
                    SetAutoMode(1);
                    SetFanshang(false);
                    SetPaizi(false);
                }
            } else {
                if (emIns.firstPlayer.playerObject.name == "大号") {
                    // 普通 大号
                    SetAutoMode(0);
                    SetFanshang(false);
                    SetPaizi(false);
                } else {
                    // 普通 小号
                    SetAutoMode(1)
                    SetFanshang(false);
                    SetPaizi(true);
                }
            }
            SetAutoChangeMap(false);
            SetAutoChangeMap(true);
        }
    }

    function GetMapByBossNumber(bossType) {
        gd.xuanShang.mapMonsterNum = {};
        gd.xuanShang.mapMonsterTime = {};
        net.XuanshangModel.ins().send3(bossType_list[bossType]);

        setTimeout(() => {
            var max = 0;
            var mapid = 0;
            var mapMonsterNum = gd.xuanShang.mapMonsterNum;
            for (a in mapMonsterNum) {
                if (mapMonsterNum[a] > max && Logic.checkCondition(cm.map[a].condition) && mapMonsterNum[a] > 0 && !black_map.includes(parseInt(a)) && parseInt(a) != gd.map.curMapId && !deliverHistory.includes(parseInt(a))) {
                    max = mapMonsterNum[a];
                    mapid = a;
                }
            }
            if (max == 0 && mapid == 0) {
                run_time = map_time - 1;
            } else {
                var isDeliver = false;
                var map = cm.map[mapid];
                for (d in cm.deliver) {
                    if (cm.deliver[d].toMapId == map.id) {
                        if (Logic.checkCondition(cm.deliver[d].condition) && (!cm.deliver[d].cost || cm.deliver[d].cost == '3000245#1') && !cm.deliver[d].x && !cm.deliver[d].y) {
                            DeliverTo(cm.deliver[d].id);
                            isDeliver = true;
                            // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]更换地图: " + mapid.toString() + " > BOSS: " + cm.monster[parseInt(cm.bossTiaoZhan[bossType_list[bossType]].showid)].name + "(" + max + ")");
                            break;
                        }
                    }
                }
                if (!isDeliver) {
                    for (d in cm.deliver) {
                        if (cm.deliver[d].toMapId == map.id) {
                            if (Logic.checkCondition(cm.deliver[d].condition) && (!cm.deliver[d].cost || cm.deliver[d].cost == '3000245#1')) {
                                DeliverTo(cm.deliver[d].id);
                                isDeliver = true;
                                // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]更换地图: " + mapid.toString() + " > BOSS: " + cm.monster[parseInt(cm.bossTiaoZhan[bossType_list[bossType]].showid)].name + "(" + max + ")");
                                break;
                            }
                        }
                    }
                }
                if (!isDeliver) {
                    console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]错误, 没有找到可传送ID: " + mapid);
                }
            }
        }, 500);
    }

    function MoveRound(x, y) {
        if (Math.abs(emIns.firstPlayer.playerObject.gridX - x) <= 6 && Math.abs(emIns.firstPlayer.playerObject.gridY - y) <= 6) {
            SetAutoFight();
            return false;
        } else {
            if (gd.arpgInst.autoFightType != 2) {
                gd.arpgInst.setAutoFight(2);
            }
            gd.map.gotoStagePoint2(x, y, gd.map.curMapId);
            return true;
        }
    }

    function MoveTo(x, y) {
        if (Math.abs(emIns.firstPlayer.playerObject.gridX - x) <= 1 && Math.abs(emIns.firstPlayer.playerObject.gridY - y) <= 1) {
            SetAutoFight();
            return false;
        } else {
            if (gd.arpgInst.autoFightType != 2) {
                gd.arpgInst.setAutoFight(2);
            }
            gd.map.gotoStagePoint2(x, y, gd.map.curMapId);
            return true;
        }
    }

    function MoveOnly(x, y) {
        if (gd.arpgInst.autoFightType != 2) {
            gd.arpgInst.setAutoFight(2);
        }
        gd.map.gotoStagePoint2(x, y, gd.map.curMapId);
    }

    function SetConfigPick(pick) { // false拾取 true不拾取
        // 配置ID来源 gd.player.settingDic
        for (let index = 30000; index < 30164; index++) {
            net.RoleModel.ins().send23(index, pick, false, -1, -1);
        }
    }

    // 自动群英会答题
    function Dati() {
        if (emIns.firstPlayer.playerObject.name == "大号") {
            if (gd.union.openDati && gd.union.datiEnd == false && gd.map.curMapId != 116) {
                run_time = 0;
                net.UnionModel.ins().send72();
                console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 群英会");
            }
            else if (gd.union.openDati && gd.union.datiEnd == false && gd.map.curMapId == 116) {
                run_time = 0;
                var answer = cm.yizhandaodi[gd.union.datiInfo.cfgId].answer.split("#");
                var t = gd.union.datiInfo.endTime - DateUtil.serverNow() / 1e3;
                if (t > 5) {
                    if (!["肝脏"].includes(answer[0])) {
                        net.ChatModel.ins().send3(Long.Zero, 9, answer[0], [], []);
                    }
                }
            }
            else if (gd.union.datiEnd && gd.map.curMapId == 116) {
                run_time = map_time;
            }
        }
    }

    // 自动建立队伍 自动接收组队不在这里
    function AutoTeam() {
        // 自动向好友组队
        if (["大号", "小号"].includes(emIns.firstPlayer.playerObject.name)) {
            if (!gd.group.teamMember) {
                net.GroupModel.ins().send4();
            } else if (gd.group.teamMember.length < 5) { // 队长发现人数不足, 尝试组小号
                if (send_team_pass <= 2) {
                    net.FriendModel.ins().send2(1);
                    for (f in gd.friend.friendList) {
                        var _team;
                        if (emIns.firstPlayer.playerObject.name == "大号") {
                            _team = team1;
                        } else {
                            _team = team2;
                        }
                        if (white_list.includes(gd.friend.friendList[f].name) && _team.includes(gd.friend.friendList[f].name)) {
                            if (!gd.group.isTeamMenber(gd.friend.friendList[f].uid.toString())) {
                                net.GroupModel.ins().send14(gd.friend.friendList[f].uid);
                            }
                        }
                    }
                }
                // 组队限制 避免被服务器黑名单
                send_team_pass++;
                if (send_team_pass > 180) {
                    send_team_pass = 0;
                }
            }
        } else {
            // 小号检测不是大号队长自动退队
            if (gd.group.teamMember) {
                var has_main = false;
                for (t in gd.group.teamMember) {
                    if (["大号", "小号"].includes(gd.group.teamMember[t].basicPlayerBean.playerName)) {
                        has_main = true;
                        break;
                    }
                }
                if (has_main == false) {
                    net.GroupModel.ins().send6();
                }
            }
        }
    }

    // 传送
    function DeliverTo(mapid) {
        if (gd.map.curMapId != 28003) {
            // 补充小飞鞋
            if (gd.bag.coins[8015] <= 100) {
                net.StoreModel.ins().send1(351, 1, 0, null);
            }
            var has_3000245 = false; // 神殿卷轴
            // 补充背包道具
            for (i in gd.bag.bagDic) {
                if (gd.bag.bagDic[i].itemId == 3000245) {
                    // 神殿卷轴
                    has_3000245 = true;
                    if (gd.bag.bagDic[i].count <= 20) {
                        net.StoreModel.ins().send1(364, 20 - gd.bag.bagDic[i].count, 0, null);
                    }
                } else if (gd.bag.bagDic[i].itemId == 404) {
                    // 随机石
                    if (gd.bag.bagDic[i].count <= 6000) {
                        net.StoreModel.ins().send1(343, 6000 - gd.bag.bagDic[i].count, 0, null); // 随机石
                    }
                } else if (gd.bag.bagDic[i].itemId == 405) {
                    // 回城石
                    if (gd.bag.bagDic[i].count <= 6000) {
                        net.StoreModel.ins().send1(342, 6000 - gd.bag.bagDic[i].count, 0, null); // 回城石
                    }
                }
            }
            if (!has_3000245) {
                net.StoreModel.ins().send1(364, 20, 0, null);
            }
            net.DeliverModel.ins().send1(mapid); // 正常传送
            AddDeliverHistory(parseInt(cm.deliver[mapid].toMapId));
            run_time = 0;
        }
    }

    function ChineseToNumber(key) {
        switch (key) {
            case "一": return 1;
            case "二": return 2;
            case "三": return 3;
            case "四": return 4;
            case "五": return 5;
            case "六": return 6;
            case "七": return 7;
            case "八": return 8;
            case "九": return 9;
            case "十": return 10;
            case "①": return 1;
            case "②": return 2;
            case "③": return 3;
            case "④": return 4;
            case "⑤": return 5;
            case "⑥": return 6;
            case "⑦": return 7;
            case "⑧": return 8;
            case "⑨": return 9;
            case "⑩": return 10;
            default: return key;
        }
    }

    function NumberToChinese(key) {
        switch (key) {
            case 1: return "一";
            case 2: return "二";
            case 3: return "三";
            case 4: return "四";
            case 5: return "五";
            case 6: return "六";
            case 7: return "七";
            case 8: return "八";
            case 9: return "九";
            case 10: return "十";
            default: return key;
        }
    }

    function convertCurrency(money) {
        //汉字的数字
        var cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
        //基本单位
        var cnIntRadice = new Array('', '拾', '佰', '仟');
        //对应整数部分扩展单位
        var cnIntUnits = new Array('', '万', '亿', '兆');
        //对应小数部分单位
        var cnDecUnits = new Array('角', '分', '毫', '厘');
        //最大处理的数字
        var maxNum = 999999999999999.9999;
        //金额整数部分
        var integerNum;
        //金额小数部分
        var decimalNum;
        //输出的中文金额字符串
        var chineseStr = '';
        //分离金额后用的数组，预定义
        var parts;
        if (money == '') { return ''; }
        money = parseFloat(money);
        if (money >= maxNum) {
            //超出最大处理数字
            return '';
        }
        if (money == 0) {
            chineseStr = cnNums[0];
            return chineseStr;
        }
        //转换为字符串
        money = money.toString();
        if (money.indexOf('.') == -1) {
            integerNum = money;
            decimalNum = '';
        } else {
            parts = money.split('.');
            integerNum = parts[0];
            decimalNum = parts[1].substr(0, 4);
        }
        //获取整型部分转换
        if (parseInt(integerNum, 10) > 0) {
            var zeroCount = 0;
            var IntLen = integerNum.length;
            for (var i = 0; i < IntLen; i++) {
                var n = integerNum.substr(i, 1);
                var p = IntLen - i - 1;
                var q = p / 4;
                var m = p % 4;
                if (n == '0') {
                    zeroCount++;
                } else {
                    if (zeroCount > 0) {
                        chineseStr += cnNums[0];
                    }
                    //归零
                    zeroCount = 0;
                    chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];
                }
                if (m == 0 && zeroCount < 4) {
                    chineseStr += cnIntUnits[q];
                }
            }
        }
        //小数部分
        if (decimalNum != '') {
            var decLen = decimalNum.length;
            for (var i = 0; i < decLen; i++) {
                var n = decimalNum.substr(i, 1);
                if (n != '0') {
                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                }
            }
        }
        if (chineseStr == '') {
            chineseStr += cnNums[0];
        }
        return chineseStr;
    }

    var fanguaji_lib = {
        "能够帮助玩家拾取装备的是什么？": "小精灵",
    }

    // 反挂机答题
    function FanGuaJi() {
        if (gd.question.endTime - DateUtil.serverNow() / 1e3 > 0) {
            for (q in gd.question.questionArr) {
                var question = gd.question.questionArr[q];
                if (question.state == 0) {
                    if (question.title.indexOf("下麵唐詩中") != -1) {
                        var str = question.title.match(/下麵唐詩中第(.*?)行第(.*?)個字是什麼/);
                        if (str.length == 3) {
                            var arr = question.title.split("<br>");
                            var askArr;
                            str[1] = ChineseToNumber(str[1]);
                            str[2] = ChineseToNumber(str[2]);
                            askArr = arr[str[1]].replace(/[^\u4e00-\u9fa5]/gi, "");
                            var ask = askArr[str[2] - 1];
                            net.QuestionModel.ins().send2(gd.question.type, q, ask);
                            break;
                        }
                    }
                    else if (question.title.indexOf("等於幾？") != -1) {
                        var str = question.title.match(/(.*?)乘(.*?)等於幾？/);
                        if (str.length == 3) {
                            str[1] = ChineseToNumber(str[1]);
                            str[2] = ChineseToNumber(str[2]);
                            var ask = convertCurrency(parseInt(str[1]) * parseInt(str[2]));
                            net.QuestionModel.ins().send2(gd.question.type, q, ask);
                            break;
                        }
                    }
                    else if (question.title.indexOf("等于几？") != -1) {
                        var str = question.title.match(/(.*?)乘(.*?)等于几？/);
                        if (str.length == 3) {
                            str[1] = ChineseToNumber(str[1]);
                            str[2] = ChineseToNumber(str[2]);
                            var ask = convertCurrency(parseInt(str[1]) * parseInt(str[2]));
                            net.QuestionModel.ins().send2(gd.question.type, q, ask);
                            break;
                        }
                    }
                    else if (question.title.indexOf("等于？") != -1) {
                        var str = question.title.match(/(.*?)加(.*?)等于？/);
                        if (str.length == 3) {
                            str[1] = ChineseToNumber(str[1]);
                            str[2] = ChineseToNumber(str[2]);
                            var ask = convertCurrency(parseInt(str[1]) + parseInt(str[2]));
                            net.QuestionModel.ins().send2(gd.question.type, q, ask);
                            break;
                        }
                    }
                    else if (question.title.indexOf("几等于") != -1) {
                        var str = question.title.match(/(.*?)加几等于(.*?)？/);
                        if (str.length == 3) {
                            str[1] = ChineseToNumber(str[1]);
                            str[2] = ChineseToNumber(str[2]);
                            var ask = NumberToChinese(parseInt(str[2]) - parseInt(str[1]));
                            net.QuestionModel.ins().send2(gd.question.type, q, ask);
                        }
                    }
                    else if (Object.keys(fanguaji_lib).includes(question.title)) {
                        var ask = fanguaji_lib[question.title];
                        net.QuestionModel.ins().send2(gd.question.type, q, ask);
                        break;
                    } else {
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]反挂机答题 ***未知问题***: " + question.title);
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]反挂机答题 选项: " + question.answerList.toString());
                        showMessage("[" + DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "]反挂机答题 ***未知问题***: " + question.title)
                        showMessage("[" + DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "]反挂机答题 选项: " + question.answerList.toString())
                        net.QuestionModel.ins().send2(gd.question.type, q, "");
                    }
                }
            }
        }
    }

    // 自动PVP战斗
    function AutoFight() {
        var player_list = emIns.getAllPlayer();
        var target_hp = 999999999;
        var target = null;
        for (p in player_list) {
            if (!white_list.includes(player_list[p].gameObject.name)) {
                if ([15400960, 15141129].includes(player_list[p].gameObject.nameColor) && !player_list[p].gameObject.isDead) {
                    if (player_list[p].gameObject.truehp < target_hp) {
                        target = p;
                        target_hp = player_list[p].gameObject.truehp;
                    }
                    break;
                }
            }
        }
        if (target) {
            emIns.selectEntity(target);
        }
    }

    // 黑名单PVP战斗
    function BlackFight() {
        var target_hp = 999999999;
        var target = null;
        var player_list = emIns.getAllPlayer();
        for (p in player_list) {
            if (black_list.includes(player_list[p].gameObject.unionName) || black_list.includes(player_list[p].gameObject.name)) {
                if (gd.arpgInst.fightModel != 2) {
                    net.MapModel.ins().send29(2); // 行会
                }
                if (player_list[p].gameObject.truehp < target_hp) {
                    target = p;
                    target_hp = player_list[p].gameObject.truehp;
                }
                break;
            }
        }
        if (target) {
            emIns.selectEntity(target);
        } else {
            var monster_list = emIns.getAllMonster();
            for (m in monster_list) {
                if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("★") != -1 && monster_list[m].gameObject.isDead == false) {
                    emIns.selectEntity(m.toString());
                    break;
                }
            }
        }
    }

    // 日常操作
    function DailyJob() {
        if (!daily_job) {
            net.VipModel.ins().send2(gd.player.getMaxGMTQ());
            net.BagModel.ins().send21();
            // 领取每日固定奖励
            net.VipModel.ins().send2(gd.player.getMaxGMTQ()); // VIP奖励
            // 购买每日道具
            net.StoreModel.ins().send1(376, 3, 0, null); // 血龙玉
            net.StoreModel.ins().send1(361, 4, 0, null); // 神之领域时间
            net.StoreModel.ins().send1(405, 10, 0, null); // 淬炼石
            net.StoreModel.ins().send1(406, 5, 0, null); // 祝福洗练石
            net.StoreModel.ins().send1(404, 1, 0, null); // 阵眼卷轴
            if (emIns.firstPlayer.playerObject.name == "大号") {
                net.StoreModel.ins().send1(906036, 2, 0, null); // 圣魂源石
            }
            if (["大号", "小号", "小号", "小号", "小号", "小号", "小号", "小号", "小号", "小号"].includes(emIns.firstPlayer.playerObject.name)) {
                net.StoreModel.ins().send1(34007, 4, 0, null); // 天工锥
            }

            // 变量重置
            gd.task.finishCount = undefined;
            gd.task.leftAcceptCount = undefined;
            gd.cangbaotu.cbtBossState = undefined;
            gd.honourbattle.qxzlMatchState = undefined;
            gd.honourbattle.qzjdpanelinfo = undefined;
            gd.honourbattle.wzzbCountInfo = undefined;
            gd.lilian.dailydic[2].completedNum = 0;
            // 元素神殿
            net.PlayModel.ins().send9(15);
            // 天关奖励
            net.DuplicateModel.ins().send62(2);
            daily_job = true;
            net.ChatModel.ins().send9(1);
            console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]开服第%d天, 合服第%d天, 合服次数:%d", gd.serv.openDay, gd.serv.hefuDay, gd.serv.hefuCount);
        }
        // 每日充值奖励
        if (gd.recharge.dayPayRewards[1].state == 1) {
            for (d in cm.dailypay) {
                if (cm.dailypay[d].startTime <= gd.serv.openDay && cm.dailypay[d].money == 0) {
                    net.RechargeModel.ins().send5(cm.dailypay[d].id);
                }
            }
        }
        // 日常任务
        if (!gd.task.finishCount) {
            uim.show(531);
        }
        if (gd.task.finishCount < 10) {
            if (gd.bag.storageList.length == 0) {
                uim.show(542);
            }
            for (s in gd.bag.storageList) {
                if ([3022886, 3022887, 3022888, 3022889].includes(gd.bag.storageList[s].itemId)) {
                    net.BagModel.ins().send24(gd.bag.storageList[s].lid, -1, gd.bag.storageList[s].count);
                }
            }

            dont_storage = true;
            CrystalTask();
        }
        else if (gd.task.leftAcceptCount == undefined) {
            uim.show(532);
        }
        else if (gd.task.leftAcceptCount > 0) {
            BossTask();
        }
        else if (personal_boss == false) {
            PersonalBoss();
            personal_boss = true;
            setTimeout(() => {
                uim.hide(531);
                uim.hide(532);
                uim.hide(542);
            }, 1000);
        }
        // 领取日常点数奖励
        var length = 0;
        for (d in gd.lilian.dailyRewards) {
            length++;
        }
        if (gd.lilian.dailyPoint >= 10 && length < 1) {
            net.DailyactiveModel.ins().send2(8);
        }
        if (gd.lilian.dailyPoint >= 30 && length < 2) {
            net.DailyactiveModel.ins().send2(9);
        }
        if (gd.lilian.dailyPoint >= 50 && length < 3) {
            net.DailyactiveModel.ins().send2(10);
        }
        if (gd.lilian.dailyPoint >= 80 && length < 4) {
            net.DailyactiveModel.ins().send2(11);
        }
        if (gd.lilian.dailyPoint >= 100 && length < 5) {
            net.DailyactiveModel.ins().send2(12);
        }
        // 领取周常点数奖励
        var length = 0;
        for (d in gd.lilian.weekRewards) {
            length++;
        }
        if (gd.lilian.weekPoint > 300 && length < 1) {
            net.DailyactiveModel.ins().send2(13);
        }
        if (gd.lilian.weekPoint > 600 && length < 2) {
            net.DailyactiveModel.ins().send2(14);
        }
    }

    // 强制群攻地图
    var group_skill_map = [201, 1026, 4001, 4002, 3601, 4701, 6077, 53001, 5436, 420, 430];
    function AutoGroupSkill() {
        if (group_skill_map.includes(gd.map.curMapId)) {
            SetGroupSkill(true);
        } else {
            var ui = uim.getUI(209);
            var targetX;
            var targetY;
            if (ui) {
                targetX = ui.selectentity.gameObject.gridX;
                targetY = ui.selectentity.gameObject.gridY;
            }
            var monster_list = emIns.getAllMonster();
            var close_count = 0;
            for (m in monster_list) {
                if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.isDead == false) {
                    var x = Math.abs(targetX - monster_list[m].gameObject.gridX);
                    var y = Math.abs(targetY - monster_list[m].gameObject.gridY);
                    if (x <= 2 && y <= 2) {
                        close_count++;
                    }
                }
            }
            if (close_count > 1) {
                SetGroupSkill(true);
            } else {
                SetGroupSkill(false);
            }
        }
    }

    // 自动采集 + 战斗
    function Fight() {
        var has = false;
        // 周围有人不采集 防止丢失归属
        var playerNum = 0;
        var player_list = emIns.getAllPlayer();
        for (p in player_list) {
            if (!white_list.includes(player_list[p].gameObject.name)) {
                playerNum++;
            }
        }
        if (!playerNum) { // 采集开关
            for (s in gd.bag.storageList) {
                // 记录仓库物品数量
                storage_num[gd.bag.storageList[s].itemId] = gd.bag.storageList[s].count;
            }
            var monster_list = emIns.getAllMonster();
            for (m in monster_list) {
                if (monster_list[m].fighterObject.canSearchCorpse) {
                    var gather = monster_list[m].fighterObject.config.gather.split("#");
                    if ((parseInt(gather[0]) == 51022890 && storage_num[3022886] < 9999) ||
                        (parseInt(gather[0]) == 51022891 && storage_num[3022887] < 9999) ||
                        (parseInt(gather[0]) == 51022892 && storage_num[3022888] < 9999) ||
                        (parseInt(gather[0]) == 51022893 && storage_num[3022889] < 9999)) {
                        has = true;
                        gd.arpgInst.setAutoFight(2);
                        gd.map.gotoStagePoint2(monster_list[m].gameObject.gridX, monster_list[m].gameObject.gridY);
                        gd.arpgInst.miningTargetUid = null;
                        emIns.selectEntity(m.toString());
                        break;
                    }
                }
            }
        } else {
            var monster_list = emIns.getAllMonster();
            for (m in monster_list) {
                if (monster_list[m].fighterObject.canSearchCorpse) {
                    emIns.destoryEntity(m.toString());
                }
            }
        }
        // 0. 基于不同地图 切换到自动战斗 采集时不战斗
        // 1. 移动到附近 开启PVE战斗由 MoveRound() 接管
        // 2. 移动到附近 开启PVP战斗由 MoveRound() + AutoFight() 接管
        // 3. 正常PVE 由此段代码接管 包含了可以PVP但只PVE的地图
        // 4. 在指定地图 ([154=盟重, 116=群英会 6077=神龙圣域] PVP地图)不会开启自动战斗
        if (has == false && ![154, 6086, 116, 6077].includes(gd.map.curMapId) && !AutoFight_list.includes(gd.map.curMapId)) {
            // 质心拉怪
            if (auto_mode == 0 && !lingpai_map_list.includes(gd.map.curMapId)) {
                SetAutoFight();
            } else {
                var monster_list = emIns.getAllMonster();
                var monster_points = [];
                monster_points.push([emIns.firstPlayer.playerObject.gridX, emIns.firstPlayer.playerObject.gridY]);
                for (m in monster_list) {
                    if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("至尊") != -1 && monster_list[m].gameObject.isDead == false) {
                        monster_points.push([monster_list[m].gameObject.gridX, monster_list[m].gameObject.gridY]);
                    }
                }
                if (monster_points.length == 1) {
                    for (m in monster_list) {
                        if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("★") != -1 && monster_list[m].gameObject.isDead == false) {
                            monster_points.push([monster_list[m].gameObject.gridX, monster_list[m].gameObject.gridY]);
                        }
                    }
                }
                if (monster_points.length > 2 && monster_points.length < 12) {
                    var point = getPolygonAreaCenter(monster_points);
                    if (gd.map.checkCanStand(point[0], point[1])) {
                        SkillClose(false);
                        if (MoveTo(point[0], point[1])) {
                            emIns.selectEntity();
                        }
                    } else {
                        SkillClose(true);
                        SetAutoFight();
                    }
                } else {
                    SkillClose(true);
                    SetAutoFight();
                }
            }
        } else {
            if (auto_change_map && map_time - run_time < 5 && gd.map.curMapId != 154) {
                run_time = map_time - 5;
            }
        }
    }

    function SetAutoFight() {
        if (gd.arpgInst.autoFightType != 1) {
            gd.arpgInst.setAutoFight(1);
        }
    }

    function Area(p0, p1, p2) {
        var area = 0.0;
        area = p0[0] * p1[1] + p1[0] * p2[1] + p2[0] * p0[1] - p1[0] * p0[1] - p2[0] * p1[1] - p0[0] * p2[1]
        return area / 2;
    }

    // 计算polygon的质心
    function getPolygonAreaCenter(points) {
        var sum_x = 0;
        var sum_y = 0;
        var sum_area = 0;
        var p1 = points[1];
        for (var i = 2; i < points.length; i++) {
            let p2 = points[i];
            area = Area(points[0], p1, p2);
            sum_area += area;
            sum_x += (points[0][0] + p1[0] + p2[0]) * area;
            sum_y += (points[0][1] + p1[1] + p2[1]) * area;
            p1 = p2;
        }
        var xx = sum_x / sum_area / 3;
        var yy = sum_y / sum_area / 3;
        return [parseInt(xx), parseInt(yy)];
    }
    // 选择怪物和换图策略 纯PVP由AutoFight()管理 这里只负责PVP+PVE混合或纯PVE的目标选择 进入自动战斗由Fight() / MoveTo() / MoveRound()代码接管
    // PVE+PVP混合战斗由此处托管的原因是 优先选择敌对玩家后 可能被其他代码干扰重新选择怪物
    // 所以统一在这里管理
    function MonsterCheck() {
        // 防雷锋 使用自动换图的deliverHistory做判断 这样各种活动都不会触发该策略
        if (auto_change_map > 0 && deliverHistory.includes(gd.map.curMapId)) {
            if (gd.arpgInst.ownerDic != null) {
                for (i in gd.arpgInst.ownerDic) {
                    if (gd.arpgInst.ownerDic[i].name != null) {
                        if (!white_list.includes(gd.arpgInst.ownerDic[i].name)) {
                            emIns.destoryEntity(i.toString());
                        }
                    }
                }
            }
        }

        //战斗策略
        if (gd.map.curMapId == 201) {
            // 无间
            BlackFight();
        } else if (gd.map.curMapId >= 7001 && gd.map.curMapId <= 7043) {
            AutoFight();
            var ui = uim.getUI(209);
            if (ui) {
                SetAutoFight();
            } else {
                // 其他移动策略
            }
        } else if ([6073, 5290].includes(gd.map.curMapId)) {
            // 蛮荒
            if (Math.abs(emIns.firstPlayer.playerObject.gridX - 342) <= 10 && Math.abs(emIns.firstPlayer.playerObject.gridY - 404) <= 10) {
                if (emIns.firstPlayer.gameObject.truehp < emIns.firstPlayer.gameObject.maxHp) {
                    MoveOnly(340, 406);
                    net.CureModel.ins().send2(0);
                }
                run_time = 0;
            }
            var monster_list = emIns.getAllMonster();
            for (m in monster_list) {
                // 优先瞄准BOSS
                if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("至尊") != -1 && monster_list[m].gameObject.isDead == false) {
                    emIns.selectEntity(m.toString());
                    run_time = 0;
                    break;
                }
            }
        } else if (gd.map.curMapId == 154) {
            // 主城
            if (emIns.firstPlayer.gameObject.truehp < emIns.firstPlayer.gameObject.maxHp) {
                MoveOnly(335, 331);
                if (Math.abs(emIns.firstPlayer.playerObject.gridX - 335) <= 2 && Math.abs(emIns.firstPlayer.playerObject.gridY - 331) <= 2) {
                    net.CureModel.ins().send2(0);
                }
                run_time = 0;
            }
            if (map_time - run_time > 3) {
                run_time = map_time - 1;
            }
            run_time++;
            if (run_time > map_time) {
                ChangeMap();
            }
        } else if (gd.map.curMapId == 6086) {
            // 传奇大陆
            if (emIns.firstPlayer.gameObject.truehp < emIns.firstPlayer.gameObject.maxHp) {
                MoveOnly(191, 239);
                if (Math.abs(emIns.firstPlayer.playerObject.gridX - 191) <= 2 && Math.abs(emIns.firstPlayer.playerObject.gridY - 239) <= 2) {
                    net.CureModel.ins().send2(0);
                }
                run_time = 0;
            } else {
                ChangeMap();
            }
        } else {
            // 标准战斗
            var monster_list = emIns.getAllMonster();
            var distance = 1000;
            var target = null;
            for (m in monster_list) {
                if (auto_mode == 0 && ![6073, 5290].includes(gd.map.curMapId) && !lingpai_map_list.includes(gd.map.curMapId)) { // 元宝
                    if (monster_list[m].monsterObject.config.type == 4) { // 检测怪物 包括尸体
                        run_time = 0;
                        break;
                    }
                } else {
                    // 优先瞄准BOSS
                    if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("至尊") != -1 && monster_list[m].gameObject.isDead == false) {
                        var x = Math.abs(emIns.firstPlayer.playerObject.gridX - monster_list[m].gameObject.gridX);
                        var y = Math.abs(emIns.firstPlayer.playerObject.gridY - monster_list[m].gameObject.gridY);
                        var c = x + y;
                        if (c < distance) {
                            distance = c;
                            target = m;
                        }
                        if (map_time - run_time > 30) {
                            run_time = map_time - 30;
                        } else if (map_time - run_time < 3) {
                            run_time = map_time - 3;
                        }
                    }
                }
            }
            if (!target) {
                if (auto_mode == 1) {
                    for (m in monster_list) {
                        // 优先瞄准BOSS
                        if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("★") != -1 && monster_list[m].gameObject.isDead == false) {
                            var x = Math.abs(emIns.firstPlayer.playerObject.gridX - monster_list[m].gameObject.gridX);
                            var y = Math.abs(emIns.firstPlayer.playerObject.gridY - monster_list[m].gameObject.gridY);
                            var c = x + y;
                            if (c < distance) {
                                distance = c;
                                target = m;
                            }
                            if (map_time - run_time < 3) {
                                run_time = map_time - 3;
                            }
                        }
                    }
                }
            }
            if (target) {
                var ui = uim.getUI(209);
                if (ui) {
                    if (target.toString() != ui.selectentity.realUid.toString()) {
                        emIns.selectEntity();
                    }
                }
                emIns.selectEntity(target.toString());
            }
            if (!target) {
                run_time++;
                if (run_time > map_time) {
                    ChangeMap();
                }
            } else {
                if (auto_mode > 0 && map_time - run_time < 5) {
                    run_time = map_time - 5;
                }
            }
            if (lingpai_map_list.includes(gd.map.curMapId)) {
                run_time = 0;
            }
        }
    }

    // 任务
    function BossTask() {
        uim.show(532);
        for (t in gd.task.bossTaskList) {
            net.TaskModel.ins().send8(gd.task.bossTaskList[t].id);
            net.TaskModel.ins().send11(gd.task.bossTaskList[t].id);
        }
    }

    // 任务
    function CrystalTask() {
        uim.show(531);

        net.TaskModel.ins().send23();
        for (t in gd.task.crystalTaskList) {
            net.TaskModel.ins().send21(gd.task.crystalTaskList[t].cfgId, gd.task.crystalTaskList[t].index);
        }
        net.TaskModel.ins().send22();
    }

    // 个人BOSS
    function PersonalBoss() {
        if (!uim.getUI(541)) {
            uim.show(541);
        }

        var has_3000312 = false;
        for (i in gd.bag.bagDic) {
            // 副本卷轴
            if (gd.bag.bagDic[i].itemId == 3000312) {
                has_3000312 = true;
                if (gd.bag.bagDic[i].count <= 40) {
                    net.StoreModel.ins().send1(367, 40 - gd.bag.bagDic[i].count, 0, null);
                    break;
                }
            }
        }
        if (!has_3000312) {
            net.StoreModel.ins().send1(367, 40, 0, null);
        }

        var personalBossList = [];
        for (b in gd.boss.personalBossList) {
            personalBossList.push(gd.boss.personalBossList[b].duplicateId);
        }

        personalBossList.reverse();
        for (b in personalBossList) {
            net.DuplicateModel.ins().send73(personalBossList[b]);
            RecyclePop.prototype.doRecycle();
        }
    }

    // 近身火雨
    function SkillClose(bool) {
        if (bool) {
            if (cm.skill[12151].releaseDis != 1) {
                cm.skill[12151].releaseDis = 1;
                cm.skill[12051].releaseDis = 1;
            }
        } else {
            if (cm.skill[12151].releaseDis != 11) {
                cm.skill[12151].releaseDis = 11;
                cm.skill[12051].releaseDis = 11;
            }
        }
    }

    // 周期奖励
    function RewardGoal() {
        var date = new Date();
        if (date.getSeconds() == 5) {
            var has_999 = false;
            for (var i in cm.activitys) {
                var r = cm.activitys[i];
                if (ActivityTimeUtil.checkActivityState(r)) {
                    // 登录奖励 至尊浩劫
                    if (r.activityType == 19824 || r.activityType == 19826) {
                        for (b in cm.activitygoals[i]) {
                            var c = cm.activitygoals[i][b];
                            var d = gd.activity.getActivityBean(c.id, c.goal, c.type);
                            if (d.rewardState == 1) {
                                net.ActivityModel.ins().send1(c.id, c.type, c.goal, 1);
                            }
                        }
                    }
                    // 限时兑换
                    else if (r.activityType == 311) {
                        for (le in gd.activity.LuxuryExchargeArr) {
                            var count = 0;
                            var lea = gd.activity.LuxuryExchargeArr[le];
                            var chg = cm.change[lea.cfgId];
                            var limit = chg.limit ? chg.limit : chg.all;
                            if (lea.changeCount < limit) {
                                if ([4, 5].includes(lea.cfgId) || ([].includes(lea.cfgId) && emIns.firstPlayer.playerObject.name == "大号")) {
                                    var costs = chg.costid.split("&");
                                    for (a in costs) {
                                        var cost = costs[a].split("#");
                                        for (s in gd.bag.storageList) {
                                            if ((gd.bag.storageList[s].itemId == cost[0] || gd.bag.storageList[s].itemId == cm.item[cost[0]][14])) {
                                                net.BagModel.ins().send24(gd.bag.storageList[s].lid, -1, gd.bag.storageList[s].count);
                                                count++;
                                            }
                                        }
                                    }
                                    if (count >= costs.length) {
                                        for (let index = 0; index < limit; index++) {
                                            net.ActivityModel.ins().send127(chg.id);
                                        }
                                    }
                                }
                            }
                        }
                        // 激战宝阁
                    } else if (r.activityType == 10001 && auto_change_map && emIns.firstPlayer.playerObject.name == "大号") {
                        var date = new Date();
                        if ((r.id == 11001 && date.getHours() == 20 && date.getMinutes() <= 2) ||
                            ((r.id == 11002 || r.id == 11003) && date.getHours() == 21 && date.getMinutes() <= 5)) {
                            if (gd.map.curMapId != 5436) {
                                run_time = 0;
                                net.DeliverModel.ins().send1(315436);
                            } else {
                                run_time = 0;
                                SetAutoFight();
                            }
                        } else {
                            if (gd.map.curMapId == 5436) {
                                net.DeliverModel.ins().send1(12002); // 回城
                            }
                        }
                    } else if (r.activityType == 19834) {
                        // 历练活动 (测试代码)
                        for (var a in cm.midautumn) {
                            for (var b in cm.midautumn[a]) {
                                var c = cm.midautumn[a][b];
                                var d = gd.activity.getMidautumnInfo(c.activityId, r.group, Number(c.goal))
                                if (d) {
                                    if (d.rewardState == 1) {
                                        net.ActivityModel.ins().send1(c.activityId, 1, Number(c.goal), 1)
                                    }
                                }
                            }
                        }
                    } else if (r.activityType == 999) {
                        has_999 = true;
                    }
                }
            }

            // 合服奖励
            for (a in gd.activity.MergeServerInfo) {
                var m = gd.activity.MergeServerInfo[a];
                if (m) {
                    for (n in m) {
                        var t = m[n];
                        if (t.status == 1) {
                            var c = cm.hefuxuanshang[t.cfgId];
                            net.ActivityModel.ins().send120(c.id);
                        }
                    }
                }
            }
            for (a in gd.activity.milingInfor) {
                var t = gd.activity.milingInfor[a];
                if (t) {
                    for (b in t.miLingBeanList) {
                        var s = t.miLingBeanList[b];
                        var l = cm.milin[s.id];
                        var r = cm.activitys[a];
                        var n = gd.bag.getCount(r.param.splitNum("#")[1], !0);
                        if (n >= l.count && (!s.freeRewardState || !s.payRewardState && t.isPaid)) {
                            net.ActivityModel.ins().send121(l.id, 0);
                        }
                    }
                }
            }

            if (has_999) {
                SetBossParty(true);
            } else {
                SetBossParty(false);
            }
        }
    }

    function showMessage(message) {
        gd.chat.onRecivedAnnouce2(new CustomChatOb(message, 5));
        var ui = uim.show(204);
        ui.onRadioSelected(5);
    }

    // 扫拍要竞价的物品 ID: 价格
    var saopai_list = {
        3022812: 800001,
        3000002: 150001,
    };

    function SaoPai() {
        if (saopai) {
            // 自动扫拍
            if (gd.friend.friendList.length == 0) {
                net.FriendModel.ins().send2(1);
            }

            // 灵符拍卖 + 元宝拍卖
            net.BourseModel.ins().send1(1);
            setTimeout(() => {
                saopai_action();
                // 行会拍卖 桃园结束后
                var date = new Date();
                if (date.getHours() == 19 && date.getMinutes() >= 20 && date.getMinutes() < 50) { // 玉的结束时间是19:50分 其他道具结束的时间是20:20
                    net.BourseModel.ins().send1(2);
                    setTimeout(() => {
                        saopai_action();
                    }, 100);
                }
            }, 100);
        }
    }

    function saopai_action() {
        for (a in gd.paimai.paimaiListData) {
            if (gd.bag.emptyItemGridCount == 0) {
                break;
            }
            var b = gd.paimai.paimaiListData[a];
            if (b.banPrice == 1 && b.buyCostItemId == 20 && gd.bag.cqb >= b.banPrice) { // 一口价1元宝
                for (c in gd.friend.friendList) {
                    if (gd.friend.friendList[c].uid.toString() == b.sellerId.toString()) {
                        if (DateUtil.serverNow() / 1e3 - b.putOnSecStamp > 2) {
                            net.BourseModel.ins().send13(b.productId, 1);
                        }
                        // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]自动抢拍: " + cm.item[b.itemBean.itemId][3]);
                        break;
                    }
                }
                // } else if (Object.keys(saopai_list).includes(b.itemBean.itemId.toString()) && b.buyCostItemId == 20 && b.maxBidder != gd.player.uid && b.banPrice == 0 && gd.bag.cqb >= b.curBiddingPrice) { // 竞价
                //     var price = saopai_list[b.itemBean.itemId];
                //     if (b.curBiddingPrice < price) {
                //         if (DateUtil.serverNow() / 1e3 - b.putOnSecStamp > 2) {
                //             net.BourseModel.ins().send12(b.productId, b.curBiddingPrice + 1);
                //         }
                //         // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]自动抢拍: " + cm.item[b.itemBean.itemId][3]);
                //         break;
                //     }
            }
        }
    }

    // 清理背包
    function CleanBag() {
        //清理背包
        if (bag) {
            // 自动上拍
            if (emIns.firstPlayer.playerObject.name != "大号") {
                var isOnline = false;
                if (gd.friend.friendList.length == 0) {
                    net.FriendModel.ins().send2(1);
                }
                for (i in gd.bag.bagDic) {
                    if (paimai_list.includes(gd.bag.bagDic[i].itemId) || paimai_add_list.includes(gd.bag.bagDic[i].itemId)) {
                        net.FriendModel.ins().send2(1);
                        break;
                    }

                }
                for (a in gd.friend.friendList) {
                    if (gd.friend.friendList[a].name == "大号" && gd.friend.friendList[a].offline == 0) {
                        isOnline = true;
                        break;
                    } else {
                        net.FriendModel.ins().send2(1);
                    }
                }
                if (isOnline) {
                    for (i in gd.bag.bagDic) {
                        if (paimai_list.includes(gd.bag.bagDic[i].itemId) || paimai_add_list.includes(gd.bag.bagDic[i].itemId)) {
                            net.BourseModel.ins().send14(1, gd.bag.bagDic[i].lid, 1, 20, 1, 1);
                            // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]自动上架: " + cm.item[gd.bag.bagDic[i].itemId][3]);
                        }
                    }
                }
            }

            // net.BagModel.ins().send34();

            // 回收 会员等级不够需要调用代码 高级不需要该代码
            // if (gd.player.getMaxGMTQ() < 16) {
            if (!uim.getUI(671)) {
                uim.show(671);
            }
            RecyclePop.prototype.doRecycle();
            // }

            // 第二个参数从cm.resolve获取
            // 元婴
            net.DecomposeModel.ins().send1(2, 5, 0);
            // 盾牌
            net.DecomposeModel.ins().send1(2, 7, 0);
            // 技能书
            net.DecomposeModel.ins().send1(2, 12, 0);
            // 灵石
            net.DecomposeModel.ins().send1(2, 13, 0);

            // 熔炼
            var D = [];
            for (var P in gd.bag.bagDic) {
                var N = gd.bag.bagDic[P];
                if (bourse_list.includes(N.itemId)) {
                    D.push(N.lid);
                } else {
                    !!gd.bag.canReTrader[N.itemId] && !gd.bag.getStarArmId(N.extraType, N.extraValue) && !gd.bag.getMohunId(N.extraType, N.extraValue) && D.push(N.lid)
                }
                if (gd.bag.s_emptyGridCount <= 8) {
                    // 防止因保留神装导致仓库和背包溢出
                    if (bourse_add_list.includes(N.itemId)) {
                        D.push(N.lid);
                    }
                }
            }
            if (D.length > 0)
                net.BourseModel.ins().send21(D);

            // 自动合成
            AutoHeCheng();

            var storaged = false;
            // 自动使用物品 & 自动存仓 & 自动丢弃 & 自动合成
            for (i in gd.bag.bagDic) {
                if (auto_use_item_list.includes(gd.bag.bagDic[i].itemId)) {
                    // 自动使用
                    if (gd.bag.bagDic[i].itemId == 214) {
                        if (gd.yabiao.emsNumKf > 0) {
                            net.BagModel.ins().send4(gd.bag.bagDic[i].count, gd.bag.bagDic[i].itemId, Long.create(0, 0), 0);
                        }
                    } else {
                        net.BagModel.ins().send4(gd.bag.bagDic[i].count, gd.bag.bagDic[i].itemId, Long.create(0, 0), 0);
                    }
                } else if (garbage_list.includes(gd.bag.bagDic[i].itemId)) {
                    // 丢弃
                    if (gd.map.config.serverType == 1 && gd.arpgInst.issafe == false) {
                        net.MapModel.ins().send46(gd.bag.bagDic[i].lid, gd.bag.bagDic[i].count);
                    }
                } else if (gd.bag.bagDic[i].itemId == 4701 && gd.bag.bagDic[i].count >= 10) {
                    // 合成镖令
                    net.CompoundModel.ins().send3(20000259, 1, 0);
                } else if (gd.bag.bagDic[i].itemId == 8515) {
                    // 自动挖宝
                    uim.show(584);
                    if (gd.bag.bagDic[i].count >= 50) {
                        net.HuntModel.ins().send2(5, 50);
                    } else if (gd.bag.bagDic[i].count >= 10) {
                        net.HuntModel.ins().send2(5, 10);
                    } else {
                        net.HuntModel.ins().send2(5, 1);
                    }
                } else if ([3022834, 3022835, 3022837].includes(gd.bag.bagDic[i].itemId)) {
                    // 自动使用经验卷轴
                    var exp = gd.player.expPopAll ? gd.player.expPopAll.toNumber() : 0;
                    if (exp >= 5e7) {
                        if (gd.bag.bagDic[i].itemId == 3022834) {
                            net.RoleModel.ins().send57(1, 5);
                        } else if (gd.bag.bagDic[i].itemId == 3022835) {
                            net.RoleModel.ins().send57(1, 10);
                        } else if (gd.bag.bagDic[i].itemId == 3022837) {
                            net.RoleModel.ins().send57(1, 100);
                        }
                    }
                } else if ((gd.bag.bagDic[i].itemId >= 31391013 && gd.bag.bagDic[i].itemId <= 31391019) ||
                    (gd.bag.bagDic[i].itemId >= 31391023 && gd.bag.bagDic[i].itemId <= 31391029) ||
                    (gd.bag.bagDic[i].itemId >= 31391033 && gd.bag.bagDic[i].itemId <= 31391039) ||
                    (gd.bag.bagDic[i].itemId >= 31391043 && gd.bag.bagDic[i].itemId <= 31391049) ||
                    (gd.bag.bagDic[i].itemId >= 31391053 && gd.bag.bagDic[i].itemId <= 31391059) ||
                    (gd.bag.bagDic[i].itemId >= 31391063 && gd.bag.bagDic[i].itemId <= 31391069) ||
                    (gd.bag.bagDic[i].itemId >= 31391073 && gd.bag.bagDic[i].itemId <= 31391079) ||
                    (gd.bag.bagDic[i].itemId >= 31391083 && gd.bag.bagDic[i].itemId <= 31391089) ||
                    (gd.bag.bagDic[i].itemId >= 31391093 && gd.bag.bagDic[i].itemId <= 31391099) ||
                    (gd.bag.bagDic[i].itemId >= 31391103 && gd.bag.bagDic[i].itemId <= 31391109) ||
                    (gd.bag.bagDic[i].itemId >= 31391113 && gd.bag.bagDic[i].itemId <= 31391119) ||
                    (gd.bag.bagDic[i].itemId >= 31391123 && gd.bag.bagDic[i].itemId <= 31391129) ||

                    (gd.bag.bagDic[i].itemId >= 31392013 && gd.bag.bagDic[i].itemId <= 31392019) ||
                    (gd.bag.bagDic[i].itemId >= 31392023 && gd.bag.bagDic[i].itemId <= 31392029) ||
                    (gd.bag.bagDic[i].itemId >= 31392033 && gd.bag.bagDic[i].itemId <= 31392039) ||
                    (gd.bag.bagDic[i].itemId >= 31392043 && gd.bag.bagDic[i].itemId <= 31392049) ||
                    (gd.bag.bagDic[i].itemId >= 31392053 && gd.bag.bagDic[i].itemId <= 31392059) ||
                    (gd.bag.bagDic[i].itemId >= 31392063 && gd.bag.bagDic[i].itemId <= 31392069) ||
                    (gd.bag.bagDic[i].itemId >= 31392073 && gd.bag.bagDic[i].itemId <= 31392079) ||
                    (gd.bag.bagDic[i].itemId >= 31392083 && gd.bag.bagDic[i].itemId <= 31392089) ||
                    (gd.bag.bagDic[i].itemId >= 31392093 && gd.bag.bagDic[i].itemId <= 31392099) ||
                    (gd.bag.bagDic[i].itemId >= 31392103 && gd.bag.bagDic[i].itemId <= 31392109) ||
                    (gd.bag.bagDic[i].itemId >= 31392113 && gd.bag.bagDic[i].itemId <= 31392119) ||
                    (gd.bag.bagDic[i].itemId >= 31392123 && gd.bag.bagDic[i].itemId <= 31392129) ||

                    (gd.bag.bagDic[i].itemId >= 31402011 && gd.bag.bagDic[i].itemId <= 31402019) ||
                    (gd.bag.bagDic[i].itemId >= 31402021 && gd.bag.bagDic[i].itemId <= 31402029) ||
                    (gd.bag.bagDic[i].itemId >= 31402031 && gd.bag.bagDic[i].itemId <= 31402039) ||
                    (gd.bag.bagDic[i].itemId >= 31402041 && gd.bag.bagDic[i].itemId <= 31402049) ||
                    (gd.bag.bagDic[i].itemId >= 31402051 && gd.bag.bagDic[i].itemId <= 31402059) ||
                    (gd.bag.bagDic[i].itemId >= 31402061 && gd.bag.bagDic[i].itemId <= 31402069) ||
                    (gd.bag.bagDic[i].itemId >= 31402071 && gd.bag.bagDic[i].itemId <= 31402079) ||
                    (gd.bag.bagDic[i].itemId >= 31402081 && gd.bag.bagDic[i].itemId <= 31402089) ||
                    (gd.bag.bagDic[i].itemId >= 31402091 && gd.bag.bagDic[i].itemId <= 31402099) ||
                    (gd.bag.bagDic[i].itemId >= 31402101 && gd.bag.bagDic[i].itemId <= 31402109) ||
                    (gd.bag.bagDic[i].itemId >= 31402111 && gd.bag.bagDic[i].itemId <= 31402119) ||
                    (gd.bag.bagDic[i].itemId >= 31402121 && gd.bag.bagDic[i].itemId <= 31402129)) {
                    // 自动穿戴
                    gd.player.wearEquip(1, gd.player.uid, cm.item[gd.bag.bagDic[i].itemId][23], gd.bag.bagDic[i].lid);
                } else if (storage_list.includes(gd.bag.bagDic[i].itemId) && dont_storage == false) {
                    // 存仓 (存仓列表)
                    if (gd.bag.s_emptyGridCount > 0) {
                        if (Object.keys(Illustration_list).includes(gd.bag.bagDic[i].itemId.toString()) && emIns.firstPlayer.playerObject.name == "大号") {
                            // 自动使用增加属性的物品
                            var a = gd.illustration.getTujianCfgByGroup(Illustration_list[gd.bag.bagDic[i].itemId])
                            net.IllustrationModel.ins().send2(a.id);
                        } else {
                            gd.bag.updatecck(gd.bag.bagDic[i].lid), net.BagModel.ins().send25(gd.bag.bagDic[i].lid, -1, gd.bag.bagDic[i].count);
                            storaged = true;
                        }
                    }
                } else if (cm.item[gd.bag.bagDic[i].itemId][25] >= 78 && gd.bag.bagDic[i].business == 1) { // GM9及以上 参照cm.rein的序号
                    // 存仓 (装备)
                    if (gd.bag.s_emptyGridCount > 0) {
                        gd.bag.updatecck(gd.bag.bagDic[i].lid), net.BagModel.ins().send25(gd.bag.bagDic[i].lid, -1, gd.bag.bagDic[i].count);
                        storaged = true;
                    }
                }
            }
            dont_storage = false;
            // 仓库整理
            if (storaged) net.BagModel.ins().send28();
        }
    }

    function ZhenYan() {
        if (gd.map.curMapId == 28003) {
            run_time = 0;
            var monster_list = emIns.getAllMonster();
            if (Object.keys(monster_list).length == 0) {
                zhenyan_timecount++;
                if (zhenyan_timecount > 5) {
                    net.DuplicateModel.ins().send54(0);
                }
            } else {
                zhenyan_timecount = 0;
            }
        } else {
            zhenyan_timecount = 0;
            for (i in gd.bag.bagDic) {
                if (gd.bag.bagDic[i].itemId == 4749) {
                    net.DuplicateModel.ins().send2(28003);
                    break;
                }
            }
        }
    }

    // 抢红包
    function QiangHongBao() {
        if (hongbao_list.includes(emIns.firstPlayer.playerObject.name)) {
            for (r in gd.union.unionRedPackList) {
                if (gd.union.unionRedPackList[r].isGet == false) {
                    net.UnionModel.ins().send37(gd.union.unionRedPackList[r].redPackId);
                }
            }
        }
    }

    function BossMessageCheck() {
        // 死亡记录会存在重复播报问题, 所以需要使用isDead单次播报
        var isDead = 0;
        for (a in gd.chat.chatMsgDic[0]) {
            if (gd.chat.chatMsgDic[0][a].content.indexOf("混世魔王：我的斧子好久没有尝过鲜血了！") != -1) {
                gd.chat.chatMsgDic[0][a].content = "";
                if (auto_change_map && gd.yabiao.endTime == 0 && gd.boss.getBossMaxCountById(8109200) - gd.boss.getBossDropCount(8109200) > 0 && !trigger_pass_map.includes(gd.map.curMapId)) {
                    var date = new Date();
                    if (date.getHours() >= 11) {
                        isShengYuBoss = true;
                        net.DeliverModel.ins().send1(201);
                    }
                }
            } else if (gd.chat.chatMsgDic[0][a].content.indexOf("魔神兽人：我的斧子好久没有尝过鲜血了！") != -1 || gd.chat.chatMsgDic[0][a].content.indexOf("魔神兽人（分身）：我的斧子好久没有尝过鲜血了！") != -1) {
                gd.chat.chatMsgDic[0][a].content = "";
                if (auto_change_map && gd.yabiao.endTime == 0 && gd.boss.getBossMaxCountById(8109200) - gd.boss.getBossDropCount(8109200) > 0 && !trigger_pass_map.includes(gd.map.curMapId)) {
                    var date = new Date();
                    if (date.getHours() >= 11) {
                        isShengYuBoss = true;
                        net.DeliverModel.ins().send1(202);
                    }
                }
            } else if (gd.chat.chatMsgDic[0][a].content.indexOf("魔神半兽人：我的斧子好久没有尝过鲜血了！") != -1 || gd.chat.chatMsgDic[0][a].content.indexOf("魔神半兽人（分身）：我的斧子好久没有尝过鲜血了！") != -1) {
                gd.chat.chatMsgDic[0][a].content = "";
                if (auto_change_map && gd.yabiao.endTime == 0 && gd.boss.getBossMaxCountById(8109200) - gd.boss.getBossDropCount(8109200) > 0 && !trigger_pass_map.includes(gd.map.curMapId)) {
                    var date = new Date();
                    if (date.getHours() >= 11) {
                        isShengYuBoss = true;
                        net.DeliverModel.ins().send1(203);
                    }
                }
            } else if (gd.chat.chatMsgDic[0][a].content.indexOf("神铸遗迹二层</font>等你来挑战！") != -1) {
                // gd.chat.chatMsgDic[0][a].content = "";
                // if (auto_change_map && emIns.firstPlayer.playerObject.name == "大号" && !lingpai_map_list.includes(gd.map.curMapId) && !trigger_pass_map.includes(gd.map.curMapId)) {
                //     if (![6029].includes(gd.map.curMapId)) {
                //         DeliverTo(400038);
                //     }
                // }
            } else if (gd.chat.chatMsgDic[0][a].content.indexOf("神铸遗迹一层</font>等你来挑战！") != -1) {
                // gd.chat.chatMsgDic[0][a].content = "";
                // if (auto_change_map && emIns.firstPlayer.playerObject.name == "大号" && !lingpai_map_list.includes(gd.map.curMapId) && !trigger_pass_map.includes(gd.map.curMapId)) {
                //     if (![6028, 6029].includes(gd.map.curMapId)) {
                //         DeliverTo(400037);
                //     }
                // }
            } else if (gd.chat.chatMsgDic[0][a].content.indexOf("创造至尊★炼狱天魔★全爆：我存在，我屹立，我守护！") != -1) {
                // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]BOSS提示: 创造至尊★炼狱天魔★全爆 已重生");
                // gd.chat.chatMsgDic[0][a].content = "";
                // if (auto_change_map && emIns.firstPlayer.playerObject.name == "大号" && !lingpai_map_list.includes(gd.map.curMapId) && !trigger_pass_map.includes(gd.map.curMapId)) {
                //     DeliverTo(16045);
                // }
            }
        }
    }

    // 自动合成 整个大类都会被合成
    function AutoHeCheng() {
        for (var a in cm.compound[93]) {
            var b = cm.compound[93][a];
            for (var c in b) {
                var d = b[c];
                var e = d.itemid1.split("&");
                var h = false;
                for (var f in e) {
                    var g = e[f].split("#");
                    if (gd.bag.getCount(Number(g[0]), !0) < Number(g[1])) {
                        h = true;
                        break;
                    }
                }
                if (!h) {
                    net.CompoundModel.ins().send3(d.id, 1, 0);
                }
            }
        }
    }

    function read(message = "") {
        var msg = new SpeechSynthesisUtterance(message);
        msg.volume = 100;
        msg.rate = 1;
        msg.pitch = 1.5;
        window.speechSynthesis.speak(msg);
    }

    function YuanSuShenDian() {
        var date = new Date();
        if (parseInt((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) > 300 && (date.getHours() < 11 || date.getHours() > 17)) {
            var a = gd.boss.getBossListByType1(15, BossData.Play_Arpg);
            var targetMap = null;
            for (var b in a) {
                var c = a[b].mapcfg.condition;
                if (Logic.checkCondition(c)) {
                    // 0 = 衣服 1 = 项链 2 = 戒指
                    if (a[b].mapcfg.id % 3 == 0 && !gd.player.equipInfo[109]) {
                        targetMap = a[b];
                    } else if (a[b].mapcfg.id % 3 == 1 && !gd.player.equipInfo[105]) {
                        targetMap = a[b];
                    } else if (a[b].mapcfg.id % 3 == 2 && !gd.player.equipInfo[107]) {
                        targetMap = a[b];
                    } else if (gd.player.equipInfo[105] && gd.player.equipInfo[107] && gd.player.equipInfo[109]) {
                        targetMap = a[b];
                    }
                }
            }
            if (targetMap) {
                if (targetMap.dieState == 0) {
                    if (gd.map.curMapId == targetMap.mapcfg.id) {
                        run_time = 0;
                        MoveRound(30, 25);
                    } else {
                        if (targetMap.ownerDropCount > 0) {
                            net.CrossModel.ins().send4(); // 检查跨服是否开放
                            if (gd.kuafu.iskuafu) {
                                net.DeliverModel.ins().send1(targetMap.mapcfg.id);
                            }
                        }
                    }
                } else {
                    if (gd.map.curMapId == targetMap.mapcfg.id) {
                        net.DeliverModel.ins().send1(12002); // 回城
                    }
                }
            }
        }
    }

    // 自动换图
    function AutoChangeMap() {
        // 自动换图
        if (auto_change_map) {
            if (emIns.firstPlayer.playerObject.name != "大号") {
                mStage.frameRate = 6;
            } else {
                mStage.frameRate = 30;
            }
            // 自动切换到和平模式
            if (!AutoFight_list.includes(gd.map.curMapId) && gd.arpgInst.fightModel != 0) {
                net.MapModel.ins().send29(0); // 和平
            }

            if (gd.map.curMapId == 154) {
                time_out++;
                if (time_out > 300) {
                    platform.reload();
                }
            } else {
                time_out = 0;
            }

            // 自动复活
            if (emIns.firstPlayer && emIns.firstPlayer.fighterObject.isDead) {
                var ui = uim.getUI(992);
                if (ui && !ui.opd.data.auto) {
                    if (![4701, 430, 53001, 4001, 4002].includes(gd.map.curMapId)) {
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]被" + ui.opd.data.param[0] + "击杀, 所在位置: " + cm.map[gd.map.curMapId].name + "," + emIns.firstPlayer.playerObject.gridX + "," + emIns.firstPlayer.playerObject.gridY);
                        showMessage("[" + DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "]被" + ui.opd.data.param[0] + "击杀, 所在位置: " + cm.map[gd.map.curMapId].name + " " + emIns.firstPlayer.playerObject.gridX + "," + emIns.firstPlayer.playerObject.gridY);
                    }
                    net.MapModel.ins().send25(1);
                }
            }

            // 调整挂机UI
            var ui = uim.getUI(671); // 回收UI
            if (ui) {
                if (ui.x != mStage.stageWidth - ui.width || ui.y != mStage.stageHeight - ui.height) {
                    ui.x = mStage.stageWidth - ui.width, ui.y = mStage.stageHeight - ui.height;
                }
            }
            var ui = uim.getUI(541); // 背包UI
            if (ui) {
                if (ui.x != mStage.stageWidth - ui.width || ui.y != mStage.stageHeight - ui.height) {
                    ui.x = mStage.stageWidth - ui.width, ui.y = mStage.stageHeight - ui.height;
                }
            }
            var ui = uim.getUI(542); // 仓库UI
            if (ui) {
                if (ui.x != mStage.stageWidth - ui.width || ui.y != mStage.stageHeight - ui.height - 460) {
                    ui.x = mStage.stageWidth - ui.width, ui.y = mStage.stageHeight - ui.height - 460;
                }
            }

            // 时间触发
            var date = new Date();
            if (date.getHours() == 0 && date.getMinutes() == 1 && date.getSeconds() == 0) {
                daily_job = false;
                personal_boss = false;
            }

            // 自动 行会首领
            // var date = new Date();
            // if (date.getHours() == 12 && date.getMinutes() >= 0 && date.getMinutes() < 10) {
            //     if (gd.map.curMapId != 4101) {
            //         net.GradBossModel.ins().send1();
            //         console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 行会首领");
            //     } else {
            //         run_time = 0;
            //         MoveTo(74,73);
            //     }
            // }

            // 自动 桃源秘宝
            // var date = new Date();
            // if (date.getHours() == 19 && date.getMinutes() >= 10 && date.getMinutes() < 20) {
            //     if (gd.map.curMapId != 430) {
            //         net.DeliverModel.ins().send1(13003);
            //         console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 桃源秘宝");
            //     } else {
            //         run_time = 0;
            //         if (gd.arpgInst.wnfsource >= cm.gangFightingWNFCReward[gd.arpgInst.wnfcurRewardStage].point && gd.arpgInst.wnfcurRewardStage != gd.arpgInst.wnfalreadyStage) {
            //             net.WnfcModel.ins().send5();
            //         }
            //     }
            // }


            // 自动协助
            var ui = uim.getUI(834);
            if (ui && !trigger_pass_map.includes(gd.map.curMapId) && [501, 502, 503, 504, 505].includes(ui.opd.data.assistMapId)) {
                if (gd.union.renownList[13] < 20000) {
                    ui.doUseItem();
                    xiezh_timecount = 0;
                } else {
                    uim.hide(834);
                }
            }

            // 协助
            if (gd.union.myAssistPlayerName != null) {
                var has = false;
                var player_list = emIns.getAllPlayer();
                for (p in player_list) {
                    if (player_list[p].gameObject.name == gd.union.myAssistPlayerName) {
                        has = true;
                        break;
                    }
                }
                run_time = 0;
                SetAutoFight();
                var monster_list = emIns.getAllMonster();
                for (m in monster_list) {
                    // 优先瞄准BOSS
                    if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("★") != -1 && monster_list[m].gameObject.isDead == false) {
                        emIns.selectEntity(m.toString());
                        break;
                    }
                }
                if (!uim.getUI(209) || !has) {
                    xiezh_timecount++;
                } else {
                    xiezh_timecount = 0;
                }
                if (xiezh_timecount > 2) {
                    net.DeliverModel.ins().send1(12002); // 回城
                }
            }
            else if (gd.union.myAssistPlayerName == null && [501, 502, 503, 504, 505].includes(gd.map.curMapId)) {
                net.DeliverModel.ins().send1(12002); // 回城
            }

            // 圣域任务
            if (!isShengYuBoss) {
                if (gd.kuafu.iskuafu) {
                    var date = new Date();
                    if (date.getHours() == 11 || (date.getHours() == 21 && date.getMinutes() > 10)) {
                        if ((gd.yabiao.emsMaxNumKf - gd.yabiao.emsNumKf > 0 ||
                            gd.boss.getBossMaxCountById(8109207) - gd.boss.getBossDropCount(8109207) > 0 ||
                            gd.boss.getYsValleyCount(407) > 0
                        )) {
                            // 有任务没做完
                            if (gd.map.curMapId != 6077) {
                                net.DeliverModel.ins().send1(506083);
                                console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 圣域任务");
                            }
                        }
                        if (gd.yabiao.emsMaxNumKf - gd.yabiao.emsNumKf > 0) {
                            // 拉镖
                            run_time = 0;
                            if (gd.arpgInst.autoFightType == 1) {
                                gd.arpgInst.setAutoFight(3);
                            }
                            if (gd.yabiao.endTime == 0) {
                                if (Math.abs(emIns.firstPlayer.playerObject.gridX - 69) <= 3 && (Math.abs(emIns.firstPlayer.playerObject.gridY - 59) <= 3)) {
                                    net.EscortModel.ins().send5(0, 0, 2), net.EscortModel.ins().send1(2);
                                } else {
                                    net.DeliverModel.ins().send1(506083);
                                }
                            } else {
                                if (gd.arpgInst.autoFightType != 4) {
                                    gd.arpgInst.setAutoFight(4);
                                }
                            }
                        } else if ((gd.boss.getBossMaxCountById(8109207) - gd.boss.getBossDropCount(8109207) > 0 || gd.boss.getYsValleyCount(407) > 0)) {
                            // 首领 圣物
                            run_time = 0;
                            SetAutoFight();
                            var monster_list = emIns.getAllMonster();
                            for (m in monster_list) {
                                if (monster_list[m].gameObject.config.type == 6) {
                                    // 移除他人镖车
                                    emIns.destoryEntity(m.toString());
                                } else if ((monster_list[m].gameObject.config.type == 4 || monster_list[m].gameObject.config.type == 1) && gd.boss.getBossMaxCountById(8109207) - gd.boss.getBossDropCount(8109207) == 0) {
                                    // 移除首领
                                    emIns.destoryEntity(m.toString());
                                } else if ((monster_list[m].gameObject.config.type == 7 || (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name == "圣域初级神物")) && gd.boss.getYsValleyCount(407) > 0) {
                                    emIns.selectEntity(m.toString());
                                    gd.arpgInst.setAutoFight(3);
                                    gd.arpgInst.setAutoFight(1);

                                }
                            }
                        } else {
                            if (gd.map.curMapId == 6077) {
                                net.DeliverModel.ins().send1(12002); // 回城
                                console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]圣域任务: 任务完成");
                            }
                        }
                    } else {
                        if (gd.map.curMapId == 6077) {
                            net.DeliverModel.ins().send1(12002); // 回城
                            console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]圣域任务: 任务完成");
                        }
                    }
                }
            } else {
                // 混世魔王的情况下 检测BOSS是否在视野中 如果失去目标 就直接离开
                // 失去目标的原因可能是有人打/死亡但没有触发掉落提示
                var has = false;
                run_time = 0;
                if (gd.map.curMapId == 6077) {
                    if (gd.boss.getBossMaxCountById(8109200) - gd.boss.getBossDropCount(8109200) == 0) {
                        isShengYuBoss = false;
                        net.DeliverModel.ins().send1(12002); // 回城
                    }
                    var monster_list = emIns.getAllMonster();
                    for (m in monster_list) {
                        if (monster_list[m].gameObject.config.type == 4 && (monster_list[m].gameObject.config.name == "混世魔王" || monster_list[m].gameObject.config.name == "魔神兽人" || monster_list[m].gameObject.config.name == "魔神半兽人" || monster_list[m].gameObject.config.name == "魔神兽人（分身）" || monster_list[m].gameObject.config.name == "魔神半兽人（分身）")) {
                            has = true;
                            emIns.selectEntity(m.toString());
                            break;
                        }
                    }
                    var ui = uim.getUI(209);
                    if (ui) {
                        var target_id = ui.selectentity.fighterObject.id;
                        if (target_id) {
                            var owner = gd.arpgInst.ownerDic[target_id];
                            if (!white_list.includes(owner.name) && owner.name != null) {
                                emIns.destoryEntity(target_id.toString());
                                console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]BOSS提示: 归属:" + owner.name);
                            }
                            if (ui.selectentity.gameObject.config.name == "混世魔王") {
                                if (emIns.firstPlayer.playerObject.name == "大号") {
                                    MoveTo(127, 122);
                                } else {
                                    MoveTo(119, 122);
                                }
                            } else {
                                SetAutoFight();
                            }
                        }
                    }
                    if (!has) {
                        // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]BOSS提示: 丢失目标");
                        isShengYuBoss = false;
                        if (gd.map.curMapId == 6077) {
                            net.DeliverModel.ins().send1(12002); // 回城
                        }
                    }
                } else {
                    // console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]BOSS提示: 丢失目标");
                    isShengYuBoss = false;
                    if (gd.map.curMapId == 6077) {
                        net.DeliverModel.ins().send1(12002); // 回城
                    }
                }
            }

            // 自动 跨服决战
            var date = new Date();
            if (date.getHours() == 14 && date.getMinutes() >= 45 && date.getMinutes() <= 59) {
                if (!gd.honourbattle.wzzbCountInfo) {
                    net.GamepvpModel.ins().send17();
                } else if (gd.honourbattle.wzzbCountInfo.matchState == 0 && gd.honourbattle.wzzbCountInfo.leftCount > 0 && gd.map.curMapId != 3601) {
                    net.GamepvpModel.ins().send3();
                    net.GamepvpModel.ins().send1(DaKuafuType.wzzb);
                    console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 跨服决战");
                } else if (gd.honourbattle.wzzbCountInfo.matchState == 1 && gd.honourbattle.wzzbCountInfo.leftCount > 0 && gd.map.curMapId != 3601) {
                    net.GamepvpModel.ins().send17();
                }
            }

            // 自动 荣耀竞技
            var date = new Date();
            if (date.getHours() == 16 && date.getMinutes() >= 30 && date.getMinutes() < 50 && [0, 2, 4, 6].includes(date.getDay())) {
                if (gd.map.curMapId != 4701) {
                    if (!gd.cangbaotu.cbtBossState) {
                        net.PlayModel.ins().send3(4701);
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 荣耀竞技");
                    }
                } else if (gd.cangbaotu.cbtBossState == 0) {
                    run_time = 0;
                    if (gd.arpgInst.fightModel != 0) {
                        net.MapModel.ins().send29(0); // 和平
                    }
                    MoveRound(36, 40);
                } else if (gd.cangbaotu.cbtBossState == 1) {
                    run_time = map_time;
                    if (gd.map.curMapId == 4701) {
                        net.PlayModel.ins().send24();
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]荣耀竞技: BOSS已经死亡");
                    }
                }
            }

            // 自动 勇者峡谷
            // var date = new Date();
            // if (((date.getHours() == 14 && date.getMinutes() >= 0 && date.getMinutes() < 30) || (date.getHours() == 21 && date.getMinutes() >= 10 && date.getMinutes() < 30)) && [1, 3, 5].includes(date.getDay()) && gd.player.reinLevel >= 8) {
            //     if (!gd.honourbattle.qzjdpanelinfo) {
            //         net.CanyonHegemonyModel.ins().send7();
            //     } else if (gd.honourbattle.qzjdmatchState == 0 && gd.honourbattle.qzjdpanelinfo.count > 0 && gd.map.curMapId != 53001) {
            //         net.GamepvpModel.ins().send3();
            //         net.GamepvpModel.ins().send1(DaKuafuType.qdjd);
            //         console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 勇者峡谷");
            //     } else if (gd.honourbattle.qzjdmatchState == 1 && gd.honourbattle.qzjdpanelinfo.count > 0 && gd.map.curMapId != 53001) {
            //         net.CanyonHegemonyModel.ins().send7();
            //     }
            // } else if (gd.honourbattle.qzjdmatchState == 1) {
            //     net.GamepvpModel.ins().send3();
            // }

            // 自动 沙巴克
            // var date = new Date();
            // if (date.getHours() == 20 && [3, 6].includes(date.getDay()) && !isShengYuBoss && emIns.firstPlayer.playerObject.name == "大号") {
            //     if (gd.inst.sbkScore == undefined) {
            //         net.DeliverModel.ins().send1(12002); // 回城
            //         net.DeliverModel.ins().send1(85);
            //     }
            //     if (gd.inst.sbkScore.personScore < 2200 || gd.inst.sbkScore.hasReward.length < 11) {
            //         if (gd.map.curMapId != 1026) {
            //             net.DeliverModel.ins().send1(12002); // 回城
            //             net.DeliverModel.ins().send1(85);
            //             console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 沙巴克");
            //         } else {
            //             // 赚分模式
            //             run_time = 0;
            //             var x = 100;
            //             var y = 100;
            //             if (emIns.firstPlayer.playerObject.name == "大号") {
            //                 // x = 94, y = 113;
            //                 x = 122, y = 72;
            //             }
            //             // else if (emIns.firstPlayer.playerObject.name == "小号") {
            //             //     x = 122, y = 87;
            //             // }
            //             // else if (emIns.firstPlayer.playerObject.name == "小号") {
            //             //     x = 122, y = 72;
            //             // }
            //             // else if (emIns.firstPlayer.playerObject.name == "小号") {
            //             //     x = 109, y = 73;
            //             // }
            //             // else if (emIns.firstPlayer.playerObject.name == "小号") {
            //             //     x = 82, y = 112;
            //             // }
            //             MoveTo(x, y);
            //             BlackFight();

            //             // 沙巴克自动领奖
            //             if (gd.inst.sbkScore) {
            //                 for (let i = 1; i <= 11; i++) {
            //                     if (!gd.inst.sbkScore.hasReward.includes(i)) {
            //                         if (gd.inst.sbkScore.personScore >= i * 200) {
            //                             net.ShobakModel.ins().send8(i);
            //                             console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]沙巴克: 领取奖励");
            //                         }
            //                     }
            //                 }
            //             }
            //         }
            //     } else {
            //         if (gd.map.curMapId == 1026) {
            //             net.DeliverModel.ins().send1(12002); // 回城
            //         }
            //     }
            // }

            // 跨服沙巴克
            var date = new Date();
            if (date.getHours() == 20 && date.getMinutes() > 2 && date.getMinutes() < 30 && date.getDay() == 0 && !(date.getMinutes() == 29 && date.getSeconds() > 30)) {
                if (gd.map.curMapId != 4002 && gd.map.curMapId != 4001) {
                    if (!gd.honourbattle.qxzlMatchState) {
                        net.PvpShabakeModel.ins().send5();
                    }
                    if (gd.honourbattle.qxzlMatchState == 7) {
                        run_time = 0;
                        if (gd.map.curMapId != 154) {
                            net.DeliverModel.ins().send1(12002); // 回城
                        } else {
                            net.PvpShabakeModel.ins().send4();
                        }
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 跨服沙巴克");
                    } else {
                        net.PvpShabakeModel.ins().send5();
                    }
                } else if (gd.map.curMapId == 4002) {
                    run_time = 0;
                    if (gd.honourbattle.qxzlCtrlPanelInfo && gd.honourbattle.qxzlCtrlPanelInfo.currentHostUnion && gd.honourbattle.qxzlCtrlPanelInfo.currentHostUnion == emIns.firstPlayer.gameObject.unionName && team1.includes(emIns.firstPlayer.gameObject.name)) {
                        // 皇宫门点 修改mapTile 禁止直线城门的移动 让所有角色绕路 这里的坐标是YX 与正常相反
                        // for (let x = 139; x < 150; x++) {
                        //     for (let y = 139; y < 150; y++) {
                        //         gd.map._pathLayer.mapTiles[y][x] = 1;
                        //     }
                        // }
                        MoveOnly(88, 80, 4002);
                    } else {
                        // 移动到两侧的复活点
                        var x1 = 168, y1 = 127;
                        var x2 = 131, y2 = 164;
                        var a = Math.abs(emIns.firstPlayer.playerObject.gridX - x1) * Math.abs(emIns.firstPlayer.playerObject.gridY - y1);
                        var b = Math.abs(emIns.firstPlayer.playerObject.gridX - x2) * Math.abs(emIns.firstPlayer.playerObject.gridY - y2);
                        if (a < b) {
                            MoveOnly(x1, y1);
                        } else {
                            MoveOnly(x2, y2);
                        }
                    }
                } else if (gd.map.curMapId == 4001) {
                    run_time = 0;
                    if (emIns.firstPlayer.playerObject.name == "大号") {
                        MoveRound(32, 37);
                    }
                    else if (team1.includes(emIns.firstPlayer.playerObject.name)) {
                        MoveTo(32, 35);
                    }
                    else if (team2.includes(emIns.firstPlayer.playerObject.name)) {
                        MoveTo(32, 35);
                    }
                    var player_list = emIns.getAllPlayer();
                    var target_hp = 0;
                    var target = null;
                    for (p in player_list) {
                        if (player_list[p].gameObject.unionName != emIns.firstPlayer.gameObject.unionName) {
                            if (player_list[p].gameObject.truehp > target_hp) {
                                target = p;
                                target_hp = player_list[p].gameObject.truehp;
                            }
                        }
                    }
                    if (target) {
                        emIns.selectEntity(target);
                    }
                }

                if (gd.honourbattle.qxzlCtrlPanelInfo && gd.honourbattle.qxzlCtrlPanelInfo.score) {
                    if (gd.honourbattle.qxzlGetRewardArr.length < 11) {
                        if (cm.sbkbmrewardpoint[gd.honourbattle.qxzlGetRewardArr.length + 1].point <= gd.honourbattle.qxzlCtrlPanelInfo.score) {
                            net.PvpShabakeModel.ins().send7(gd.honourbattle.qxzlGetRewardArr.length + 1);
                            console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]跨服沙巴克: 领取奖励");
                        }
                    }
                }
            }

            // 无间炼狱
            var date = new Date();
            if (date.getHours() >= 13) {
                var has_BOSS = 0;
                // BOSS信息不存在就进图拿数据
                if (Object.keys(gd.xuanShang.mapMonster1Time).length == 0) {
                    net.CrossModel.ins().send4(); // 检查跨服是否开放
                    if (gd.kuafu.iskuafu) {
                        net.PlayModel.ins().send3(201);
                    } else {
                        gd.xuanShang.mapMonster1Time = {};
                    }
                }

                if (gd.xuanShang.mapMonster1Time) {
                    for (a in wujian_check_list) {
                        if (gd.xuanShang.mapMonster1Time[a].reliveTime - DateUtil.serverNow() / 1e3 < 30) {
                            has_BOSS = a;
                        }
                    }
                    // 战斗逻辑
                    if (gd.map.curMapId != 201 && has_BOSS > 0) {
                        if (gd.map.curMapId == 5290) { // 在蛮荒古城 回血
                            if (emIns.firstPlayer.gameObject.truehp < emIns.firstPlayer.gameObject.maxHp) {
                                MoveOnly(341, 404);
                                net.CureModel.ins().send2(0);
                                console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]无间炼狱: 回血");
                            }
                        }
                        net.PlayModel.ins().send3(201);
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]进入活动: 无间炼狱");
                        run_time == 0;
                    } else if (gd.map.curMapId == 201 && has_BOSS > 0) { // BOSS存活 并且在无间地图
                        MoveRound(wujian_check_list[has_BOSS].x, wujian_check_list[has_BOSS].y);
                        run_time == 0;
                    } else if (gd.map.curMapId == 201 && has_BOSS == 0) {
                        net.DeliverModel.ins().send1(12002); // 回城
                        console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]无间炼狱: 结束");
                    }
                }
            }

            // 石原攻城
            // if (gd.activity.specialActivityBossAlive && !trigger_pass_map.includes(gd.map.curMapId) && !AutoFight_list.includes(gd.map.curMapId) && emIns.firstPlayer.playerObject.name == "大号") {
            //     if (gd.map.curMapId != 5255) {
            //         DeliverTo(13002);
            //     } else {
            //         run_time = 0;
            //         SetAutoFight();
            //         // 选择攻城怪物
            //         var monster_list = emIns.getAllMonster();
            //         for (m in monster_list) {
            //             // 优先瞄准BOSS
            //             if (monster_list[m].gameObject.config.type == 4 && monster_list[m].gameObject.config.name.indexOf("★") != -1 && monster_list[m].gameObject.isDead == false) {
            //                 emIns.selectEntity(m.toString());
            //                 break;
            //             }
            //         }
            //         if (emIns.firstPlayer.playerObject.gridY > 310) {
            //             DeliverTo(13002);
            //         }
            //     }
            // }

            // 隐藏地图 不换图 打到时间结束
            if ([5300, 5120].includes(gd.map.curMapId)) {
                run_time = 0;
            }

            // 不同活动和模式 切换SkillClose [4101=行会首领 154=主城 6077=神龙圣域]
            // 仅自动战斗生效
            if (AutoFight_list.includes(gd.map.curMapId) || [4101, 154, 6077].includes(gd.map.curMapId)) {
                SkillClose(false);
            }
            else if ([6073, 5290].includes(gd.map.curMapId)) { // 蛮荒
                SkillClose(true);
            }
            else if (lingpai_map_list.includes(gd.map.curMapId)) { // 隐龙山谷 幻境
                SkillClose(false);
            }
            else if (gd.map.config.name.indexOf("神殿") != -1) {
                SkillClose(false);
            }
            else if (gd.map.config.name.indexOf("恶魔祭坛") != -1) {
                SkillClose(false);
            }
            else if (auto_mode > 0) {
                SkillClose(true);
            }

            Dati();
            AutoTeam();

            MonsterCheck();
            Fight();
            if (personal_boss) {
                ZhenYan();
                if (gd.map.curMapId != 28003) {
                    YuanSuShenDian();
                }
            }
            document.getElementById("btn_auto_change_map").innerHTML = "自动换图[" + (map_time - run_time).toString() + "]";
        }
    }

    // 定时任务
    var timer1 = setInterval(function () {
        if (typeof (js_gameVars) != "undefined" && typeof (gd) == "undefined") {
            if (js_gameVars.createRoleMsg.uid1) {
                if (js_gameVars.createRoleMsg.level1 > js_gameVars.createRoleMsg.level2) {
                    qufu.QufuMessageHandler.sendReqTryEnterGameMessage(js_gameVars.createRoleMsg.uid1);
                } else {
                    qufu.QufuMessageHandler.sendReqTryEnterGameMessage(js_gameVars.createRoleMsg.uid2);
                }
            }
        }

        AutoStartUp();

        if (uim.getUI(846)) {
            uim.hide(846);
        }
        if (uim.getUI(665)) {
            uim.hide(665);
        }

        if (typeof (gd) == "undefined" || gd.serv.reconnecting) {
            return;
        }

        if (typeof (gd.player.roleName) != "undefined" && typeof (document) != "undefined") {
            document.title = gd.player.roleName.replaceAll("小", "").replaceAll("吴", "");
            if (cm.map[gd.map.curMapId].name.length > 2) {
                document.title += "[" + cm.map[gd.map.curMapId].name.substr(0, 1) + cm.map[gd.map.curMapId].name.substr(-2, 1) + "]";
            } else {
                document.title += "[" + cm.map[gd.map.curMapId].name + "]";
            }
            var ui = uim.getUI(209);
            if (ui) {
                document.title += "[" + parseFloat(ui.selectentity.fighterObject.truehp / ui.selectentity.fighterObject.maxHp * 100).toFixed(1) + "]";
            }
            if (Object.keys(gd.boss.gmTreasure).length == 0) {
                net.DuplicateModel.ins().send62(2);
            }
            let count = 0;
            for (a in gd.boss.gmTreasure[2]) {
                var b = gd.boss.gmTreasure[2][a];
                if (b.state == 0 && b.itemId == 3000748) {
                    count++;
                }
            }
            if (count > 1) {
                document.title += "气";
            }
            // if (gd.union.renownList[13] < 20000) {
            //     document.title += "助";
            // }
            document.title += "　　　　　　　　　　...";

            var show_data = "";
            show_data = "战力: " + gd.player.attribute[93] + "<br>";
            show_data += "吸血: " + gd.player.attribute[87] + "<br>";

            if (240 - gd.bag.s_maxGridCount > 0) {
                show_data += "仓库: " + (240 - gd.bag.s_maxGridCount).toString() + "<br>";
            }



            // 反伤装等级提示 以后可能还要用
            // if (gd.player.equipInfo[408].config[4] < 5) {
            //     show_data += "刀: " + gd.player.equipInfo[408].config[4] + "<br>";
            // }
            // if (gd.player.equipInfo[409].config[4] < 5) {
            //     show_data += "弓: " + gd.player.equipInfo[409].config[4] + "<br>";
            // }
            // if (gd.player.equipInfo[410].config[4] < 5) {
            //     show_data += "盔: " + gd.player.equipInfo[410].config[4] + "<br>";
            // }
            // if (gd.player.equipInfo[411].config[4] < 5) {
            //     show_data += "链: " + gd.player.equipInfo[411].config[4] + "<br>";
            // }
            // if (gd.player.equipInfo[412].config[4] < 5) {
            //     show_data += "甲: " + gd.player.equipInfo[412].config[4] + "<br>";
            // }
            // if (gd.player.equipInfo[413].config[4] < 5) {
            //     show_data += "靴: " + gd.player.equipInfo[413].config[4] + "<br>";
            // }
            if (!gd.player.equipInfo[1] || gd.player.equipInfo[1].config[25] < 56) {
                show_data += "装备: 刀 ×<br>";
            }
            if (!gd.player.equipInfo[5] || gd.player.equipInfo[5].config[25] < 56) {
                show_data += "装备: 甲 ×<br>";
            }
            if (!gd.player.equipInfo[2] || gd.player.equipInfo[2].config[25] <= 67) {
                show_data += "装备: 戒 ×<br>";
            }
            if (!gd.player.equipInfo[3] || gd.player.equipInfo[3].config[25] <= 67) {
                show_data += "装备: 镯 ×<br>";
            }
            if (!gd.player.equipInfo[4] || gd.player.equipInfo[4].config[25] <= 67) {
                show_data += "装备: 盔 ×<br>";
            }
            if (!gd.player.equipInfo[6] || gd.player.equipInfo[6].config[25] <= 67) {
                show_data += "装备: 鞋 ×<br>";
            }
            if (!gd.player.equipInfo[7] || gd.player.equipInfo[7].config[25] <= 67) {
                show_data += "装备: 带 ×<br>";
            }
            if (!gd.player.equipInfo[8] || gd.player.equipInfo[8].config[25] <= 67) {
                show_data += "装备: 链 ×<br>";
            }
            if (!gd.player.equipInfo[9] || gd.player.equipInfo[9].config[25] <= 67) {
                show_data += "装备: 戒 ×<br>";
            }
            if (!gd.player.equipInfo[10] || gd.player.equipInfo[10].config[25] <= 67) {
                show_data += "装备: 镯 ×<br>";
            }

            if (!gd.player.equipInfo[49]) {
                show_data += "万字诀: 问 ×<br>";
            }
            if (!gd.player.equipInfo[50]) {
                show_data += "万字诀: 苍 ×<br>";
            }
            if (!gd.player.equipInfo[51]) {
                show_data += "万字诀: 天 ×<br>";
            }
            if (!gd.player.equipInfo[52]) {
                show_data += "万字诀: 唯 ×<br>";
            }
            if (!gd.player.equipInfo[53]) {
                show_data += "万字诀: 我 ×<br>";
            }
            if (!gd.player.equipInfo[54]) {
                show_data += "万字诀: 行 ×<br>";
            }

            if (!gd.player.equipInfo[105]) {
                show_data += "圣装: 链 ×<br>";
            }
            if (!gd.player.equipInfo[107]) {
                show_data += "圣装: 戒 ×<br>";
            }
            if (!gd.player.equipInfo[109]) {
                show_data += "圣装: 甲 ×<br>";
            }

            document.getElementById("show_data").innerHTML = show_data;
        }

        if (typeof (MtwGame) != "undefined") {
            // 断线重连
            if (MtwGame.Instance.reconnectActivate && gd.serv.reconnecting == 0) {
                platform.reload();
            }
        }

        var date = new Date();
        if (date.getSeconds == 30) {
            net.GroupModel.ins().send4();
        }

        // 添加路径点(不能移动的地图) 或修改路径点避开危险区域
        if (gd.map.guajiArea == null || gd.map.guajiArea.length == 0) {
            if (gd.map.curMapId == 6051) { // 水上城市
                gd.map.guajiArea = [[42, 41], [154, 43], [46, 200], [153, 220]];
            } else if (gd.map.curMapId == 5255) { // 石原攻城
                gd.map.guajiArea = [[351, 281], [384, 264], [361, 292], [353, 274]];
            } else if (gd.map.curMapId >= 5446 && gd.map.curMapId <= 5450) {
                gd.map.guajiArea = [[48, 100]];
            } else if (gd.map.curMapId >= 5601 && gd.map.curMapId <= 5605) {
                gd.map.guajiArea = [[38, 45]];

                for (let x = 97; x < 107; x++) {
                    for (let y = 38; y < 48; y++) {
                        gd.map._pathLayer.mapTiles[y][x] = 1;
                    }
                }
            } else if (gd.map.curMapId == 6073) {
                gd.map.guajiArea = [];
                for (a in cm.minimap[6073]) {
                    var b = cm.minimap[6073][a];
                    if (cm.monster[b.mid].type == 4) {
                        gd.map.guajiArea.push([b.x, b.y]);
                    }
                }
            } else if (gd.map.curMapId == 5290) {
                gd.map.guajiArea = [];
                for (a in cm.minimap[5290]) {
                    var b = cm.minimap[5290][a];
                    if (cm.monster[b.mid].type == 4) {
                        gd.map.guajiArea.push([b.x, b.y]);
                    }
                }
            } else if (gd.map.curMapId == 5300) {
                gd.map.guajiArea = [[54, 54], [81, 14]];
            } else if (gd.map.curMapId == 6077) {
                gd.map.guajiArea = [[183, 16], [218, 62], [147, 94], [93, 139], [62, 184], [134, 178], [192, 193]];
            } else if (gd.map.curMapId == 6095 || gd.map.curMapId == 6093) { // 星空幻境
                gd.map.guajiArea = [[59, 235], [168, 224], [176, 55], [192, 150]];
            } else if (gd.map.curMapId == 6100 || gd.map.curMapId == 6099) { // 深渊禁地二层
                gd.map.guajiArea = [[119, 44], [40, 86], [32, 144], [43, 226], [104, 226], [182, 157], [179, 52], [72, 185]];
            } else if (gd.map.curMapId == 6101) { // 域外幻境
                gd.map.guajiArea = [];
                for (a in cm.minimap[6073]) {
                    var b = cm.minimap[6073][a];
                    if (cm.monster[b.mid].type == 4) {
                        gd.map.guajiArea.push([b.x, b.y]);
                    }
                }
            }
        } else if (gd.map.guajiArea.toString() == '81,80,27,24') {
            gd.map.guajiArea = [[20, 36], [40, 20], [44, 69], [65, 48], [81, 80]];
        } else if (gd.map.guajiArea.toString() == '25,29,73,76,18,63,63,20') {
            gd.map.guajiArea = [[36, 41]];
        } else if (gd.map.guajiArea.toString() == '351,281,384,264,361,292,353,274') {
            gd.map.guajiArea = [[386, 264], [369, 257], [349, 273], [366, 294]];
        }

        // 自动PVP战斗
        if (AutoFight_list.includes(gd.map.curMapId)) {
            pvp_time++;
            run_time = 0;
            if (gd.map.curMapId == 3601 && gd.honourbattle.myBuffPanelInfo.select == 0) {
                for (a in gd.honourbattle.myBuffPanelInfo.cfgId) {
                    var b = gd.honourbattle.myBuffPanelInfo.cfgId[a];
                    // cm.buffchoose
                    if ([13, 15, 17, 19, 23, 25].includes(b)) {
                        net.GamepvpModel.ins().send39(gd.arpgInst.cfgId, b);
                    }
                }
            }
            else if (gd.map.curMapId == 3601 && pvp_time > 20) { // 跨服决战 延时20秒开战
                MoveRound(38, 35);
                var target_hp = 999999999;
                var target = null;
                var player_list = emIns.getAllPlayer();
                for (p in player_list) {
                    if (!white_list.includes(player_list[p].gameObject.name)) {
                        if ([15400960, 15141129].includes(player_list[p].gameObject.nameColor) && !player_list[p].gameObject.isDead) {
                            if (player_list[p].gameObject.truehp < target_hp) {
                                target = p;
                                target_hp = player_list[p].gameObject.truehp;
                            }
                        }
                    }
                }
                if (target) {
                    emIns.selectEntity(target);
                } else {
                    // 没有敌人 攻击自己人
                    var player_list = emIns.getAllPlayer();
                    for (p in player_list) {
                        if ([15400960, 15141129].includes(player_list[p].gameObject.nameColor) && !player_list[p].gameObject.isDead) {
                            if (player_list[p].gameObject.name != "大号") {
                                emIns.selectEntity(p);
                                break;
                            }
                        }
                    }
                }
            } else if (gd.map.curMapId == 420) { // 热血乱斗场
                MoveRound(51, 43);
                AutoFight();
            } else if (gd.map.curMapId == 53001) { // 勇者峡谷
                if (Math.abs(emIns.firstPlayer.playerObject.gridX - 90) < 30 && Math.abs(emIns.firstPlayer.playerObject.gridY - 29) < 30) {
                    MoveTo(90, 29);
                    AutoFight();
                } else {
                    MoveTo(34, 103);
                    AutoFight();
                }
            } else if (gd.map.curMapId == 430) { // 桃源秘宝
                SetAutoFight();
                AutoFight();
            }
        } else {
            pvp_time = 0;
        }

        // 自动接受组队
        if (!["大号", "小号"].includes(emIns.firstPlayer.playerObject.name)) {
            for (t in gd.group.invitations) {
                if (["大号", "小号"].includes(gd.group.invitations[t].playerName)) {
                    net.GroupModel.ins().send15(1, gd.group.invitations[t].groupId);
                }
            }
        }

        // 自动接受交易
        if (gd.trade.invitator) {
            if (white_list.includes(gd.trade.invitator.name)) {
                net.TradeModel.ins().send3(gd.trade.invitator.uid);
                gd.trade.invitator = null;
            }
        }

        // 自动完成交易
        if (!!gd.trade.tradeTargetName) {
            if (white_list.includes(gd.trade.tradeTargetName)) {
                if (gd.trade.tradeState) {
                    if (gd.trade.tradeState[gd.trade.tradeTargetUid]) {
                        if (!gd.trade.tradeState[emIns.firstPlayer.realUid]) {
                            net.TradeModel.ins().send6(1);
                        } else if (gd.trade.tradeState[emIns.firstPlayer.realUid] == 1) {
                            net.TradeModel.ins().send6(1);
                        } else if (gd.trade.tradeState[emIns.firstPlayer.realUid] == 2) {
                            net.TradeModel.ins().send6(3);
                        }
                    }
                }
            }
        }

        // 自动领剑灵碎片
        if (gd.newFakeVipData.exp >= 10000) {
            net.GroupModel.ins().send30();
        }

        // 小精灵自动补货
        if (gd.player.petOverTime - DateUtil.serverNow() / 1e3 < 86400) {
            if (gd.bag.coins[41] + gd.bag.coins[20] > 8000000) {
                net.StoreModel.ins().send1(378, 1, 0, null); // 小精灵
            }
        }

        var date = new Date();
        // 自动领邮件
        var l = [];
        for (e in gd.email.emails) {
            var i = gd.email.emails[e];
            if (i.items && i.state != 2) {
                l.push(i.id);
            }
        }
        if (l.length > 0) {
            net.EmailModel.ins().send5(0, l);
        }

        if (gd.map.curMapId >= 5446 && gd.map.curMapId <= 5605) {
            SkillClose(true);
        }


        // 高级自动跟随
        /*
        if ([].includes(gd.map.curMapId)) {
            var myAssistPlayer = null;
            for (p in player_list) {
                if (player_list[p].gameObject.name == "大号") {
                    myAssistPlayer = player_list[p].gameObject;
                    break;
                }
            }
            MoveTo(myAssistPlayer.gridX, myAssistPlayer.gridY);
        }
        */
        AutoGroupSkill();
        DailyJob();
        RewardGoal();
        AutoChangeMap();
        FanGuaJi();
        BossMessageCheck();
    }, 1000);

    // 高频定时任务
    // var timer2 = setInterval(function () {
    //     // 躲避
    //     if (auto_change_map && gd.arpgInst.issafe == false && ![154, 6077].includes(gd.map.curMapId) && !AutoFight_list.includes(gd.map.curMapId)) {
    //         var player_list = emIns.getAllPlayer();
    //         for (p in player_list) {
    //             if (!white_list.includes(player_list[p].gameObject.name) && player_list[p].gameObject.unionName != emIns.firstPlayer.gameObject.unionName && player_list[p].gameObject.criminal) {
    //                 console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]检测到罪犯: " + player_list[p].gameObject.name + ", 所在位置:" + cm.map[gd.map.curMapId].name + " " + emIns.firstPlayer.playerObject.gridX + "," + emIns.firstPlayer.playerObject.gridY);
    //                 net.DeliverModel.ins().send1(12002); // 回城
    //                 break;

    //             }
    //             else if (black_list.includes(player_list[p].gameObject.name) || black_list.includes(player_list[p].gameObject.unionName)) {
    //                 console.log(DateUtil.getTimeStrHMS((DateUtil.serverNow() - gd.serv.curZeroTime) / 1e3) + "[霸主辅助]检测到黑名单: " + player_list[p].gameObject.name + ", 所在位置:" + cm.map[gd.map.curMapId].name + " " + emIns.firstPlayer.playerObject.gridX + "," + emIns.firstPlayer.playerObject.gridY);
    //                 net.DeliverModel.ins().send1(12002); // 回城
    //                 break;
    //             }
    //         }
    //     }
    // }, 200);

    var timer3 = setInterval(function () {
        CleanBag();
        QiangHongBao();
        SaoPai();
    }, 1000);

    var low_hp_escape = 0;
    var timer4 = setInterval(function () {
        if (auto_change_map && emIns.firstPlayer.gameObject.truehp < emIns.firstPlayer.gameObject.maxHp * 0.7 && !emIns.firstPlayer.gameObject.isDead) {
            if (!AutoFight_list.includes(gd.map.curMapId) && gd.map.curMapId != 154) {
                if (!low_hp_escape) {
                    low_hp_escape = 5;
                    net.DeliverModel.ins().send1(12002); // 回城
                }
                low_hp_escape--;
            }
        }
    }, 200);

    function SetBagClean(bool) {
        if (bool) {
            document.getElementById("btn_bag").style.background = "#28a745";
        } else {
            document.getElementById("btn_bag").style.background = "#6c757d";
        }
        bag = bool;
    }

    function SetAutoChangeMap(bool) {
        if (bool) {
            deliverHistory = [];
            time_out = 0;
            bossType = 0;
            document.getElementById("btn_auto_change_map").innerHTML = "自动换图[" + (map_time - run_time).toString() + "]";
            document.getElementById("btn_auto_change_map").style.background = "#28a745";
            if (auto_mode == 0) {
                SkillClose(false);
                SetConfigPick(true);
            } else {
                SkillClose(true);
                SetConfigPick(false);
            }
            if (emIns.firstPlayer.playerObject.name == "大号") {
                // SetSaoPai(true);
            }
        } else {
            run_time = 0;
            mStage.frameRate = 60;
            document.getElementById("btn_auto_change_map").innerHTML = "自动换图";
            document.getElementById("btn_auto_change_map").style.background = "#6c757d";
            SkillClose(false);
        }
        auto_change_map = bool;
    }

    function SetGroupSkill(bool) {
        if (bool) {
            gd.player.settingDic[1214].value = 12151;
        } else {
            gd.player.settingDic[1214].value = 12051;
        }
        single_to_group = bool;
    }

    function SetSaoPai(bool) {
        if (bool) {
            document.getElementById("btn_saopai").style.color = "#000000";
            document.getElementById("btn_saopai").style.background = "#ffc107";
        } else {
            document.getElementById("btn_saopai").style.color = "#ffffff";
            document.getElementById("btn_saopai").style.background = "#6c757d";
        }
        saopai = bool;
    }

    function SetFanshang(bool) {
        if (bool) {
            document.getElementById("btn_mode_fanshang").style.color = "#000000";
            document.getElementById("btn_mode_fanshang").style.background = "#ffc107";
        } else {
            document.getElementById("btn_mode_fanshang").style.color = "#ffffff";
            document.getElementById("btn_mode_fanshang").style.background = "#6c757d";
        }
        mode_fanshang = bool;
    }

    function SetPaizi(bool) {
        if (bool) {
            document.getElementById("btn_mode_paizi").style.color = "#000000";
            document.getElementById("btn_mode_paizi").style.background = "#ffc107";
        } else {
            document.getElementById("btn_mode_paizi").style.color = "#ffffff";
            document.getElementById("btn_mode_paizi").style.background = "#6c757d";
        }
        mode_paizi = bool;
    }

    // 自动交易
    function AutoTradeItem() {
        if (emIns.firstPlayer.playerObject.name != "大号") {
            if (!gd.trade.tradeTargetUid) {
                var player_list = emIns.getAllPlayer();
                for (p in player_list) {
                    if (player_list[p].gameObject.name == "大号") {
                        net.TradeModel.ins().send1(player_list[p].realUid);
                        break;
                    }
                }
            } else {
                for (s in gd.bag.storageList) {
                    if (auto_trade_item.includes(gd.bag.storageList[s].itemId) || (cm.item[gd.bag.storageList[s].itemId][25] >= 67 && gd.bag.storageList[s].business == 1)) {
                        net.BagModel.ins().send24(gd.bag.storageList[s].lid, -1, gd.bag.storageList[s].count);
                    }
                }
                for (i in gd.bag.bagDic) {
                    if (auto_trade_item.includes(gd.bag.bagDic[i].itemId) || (cm.item[gd.bag.storageList[s].itemId][25] >= 67 && gd.bag.storageList[s].business == 1)) {
                        net.BagModel.ins().send29(gd.bag.bagDic[i].lid, gd.bag.bagDic[i].itemId, gd.bag.bagDic[i].count);
                    }
                }
            }
        } else {
            WZJY();
        }
    }

    function WZJY() {
        for (s in gd.bag.storageList) {
            if ([3000850, 3000851, 3000852, 3000853, 3000873, 3000877, 3000854].includes(gd.bag.storageList[s].itemId)) {
                net.BagModel.ins().send24(gd.bag.storageList[s].lid, -1, gd.bag.storageList[s].count);
            }
        }
        // 合成
        var min = 99999;
        var count_3000873 = 0;
        for (i in gd.bag.bagDic) {
            if ([3000850, 3000851, 3000852, 3000853].includes(gd.bag.bagDic[i].itemId)) {
                if (gd.bag.bagDic[i].count <= min) {
                    min = gd.bag.bagDic[i].count;
                }
            } else if (gd.bag.bagDic[i].itemId == 3000873) {
                count_3000873 = gd.bag.bagDic[i].count;
            }
        }
        net.CompoundModel.ins().send3(20000629, min, 0); // 合成 万字诀引
        net.CompoundModel.ins().send3(20000631, count_3000873, 0); // 合成 圣器宝匣
    }

    // 红绿开关按钮
    function CreateUI() {
        $("body").append("<div id='btn_bag' style='left: 10px;bottom: 10px;background: #6c757d;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 140px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>清理背包</div>");
        $("#btn_bag").click(function () {
            bag = !bag;
            SetBagClean(bag);
        });
        $("body").append("<div id='btn_auto_change_map' style='left: 10px;bottom: 52px;background: #6c757d;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 140px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>自动换图</div>");
        $("#btn_auto_change_map").click(function () {
            auto_change_map = !auto_change_map;
            SetAutoChangeMap(auto_change_map);
        });
        // 红绿开关按钮 END

        // 黄色按钮
        $("body").append("<div id='btn_change_map_mode' style='left: 170px;bottom: 52px;background: #ffc107;color:#000000;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>打玉</div>");
        $("#btn_change_map_mode").click(function () {
            switch (auto_mode) {
                case 0:
                    SetAutoMode(1);
                    break;
                case 1:
                    SetAutoMode(2);
                    break;
                case 2:
                    SetAutoMode(0);
                    break;
            }
        });
        $("body").append("<div id='btn_saopai' style='left: 260px;bottom: 52px;background: #6c757d;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>扫拍</div>");
        $("#btn_saopai").click(function () {
            saopai = !saopai;
            SetSaoPai(saopai);
        });
        $("body").append("<div id='btn_mode_fanshang' style='left: 350px;bottom: 52px;background: #6c757d;color:#ffffff;overflow: hidden;z-index: 9999;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>反伤</div>");
        $("#btn_mode_fanshang").click(function () {
            mode_fanshang = !mode_fanshang;
            SetFanshang(mode_fanshang);
        });
        $("body").append("<div id='btn_mode_paizi' style='left: 440px;bottom: 52px;background: #6c757d;color:#ffffff;overflow: hidden;z-index: 9999;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>令牌</div>");
        $("#btn_mode_paizi").click(function () {
            mode_paizi = !mode_paizi;
            SetPaizi(mode_paizi);
        });
        // 黄色按钮 END

        // 红色按钮
        $("body").append("<div id='btn_auto_trade' style='left: 170px;bottom: 10px;background: #dc3545;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>上缴</div>");
        $("#btn_auto_trade").click(function () {
            AutoTradeItem();
        });
        $("body").append("<div id='btn_yanhuo' style='left: 260px;bottom: 10px;background: #dc3545;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>烟火</div>");
        $("#btn_yanhuo").click(function () {
            uim.show(519);
        });
        $("body").append("<div id='btn_zhuangyuan' style='left: 350px;bottom: 10px;background: #dc3545;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>庄园</div>");
        $("#btn_zhuangyuan").click(function () {
            net.DeliverModel.ins().send1(12000);
        });
        $("body").append("<div id='btn_upgrand' style='left: 440px;bottom: 10px;background: #dc3545;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>升级</div>");
        $("#btn_upgrand").click(function () {
            for (s in gd.bag.storageList) {
                if (upgrand_list.includes(gd.bag.storageList[s].itemId)) {
                    net.BagModel.ins().send24(gd.bag.storageList[s].lid, -1, gd.bag.storageList[s].count);
                }
            }
            net.CompoundModel.ins().send3(20000546, 1, 0); // 魂之精石
            net.CompoundModel.ins().send3(20000547, 1, 0); // 魂之神石
            for (let index = 20000115; index <= 20000134; index++) {
                net.CompoundModel.ins().send3(index, 1, 0); // 面纱
            }
        });
        $("body").append("<div id='btn_linghun' style='left: 530px;bottom: 10px;background: #dc3545;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 70px;height: 22px;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'>灵魂</div>");
        $("#btn_linghun").click(function () {
            uim.show(650);
            uim.show(644);
        });
        // 红色按钮 END

        $("body").append("<div id='show_data' style='left: 10px;bottom: 94px;background: #343a40;color:#ffffff;overflow: hidden;z-index: 100;position: fixed;padding:5px;text-align:center;width: 160px;height: auto;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;border-top-left-radius: 4px;border-top-right-radius: 4px;'></div>");
    }
    console.log("[霸主辅助]加载完成");
})();
